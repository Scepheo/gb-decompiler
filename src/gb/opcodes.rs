use gb::*;
use std::fmt;

#[derive(Clone, Copy, Debug)]
pub struct Instruction {
    pub address: usize,
    pub op_code: OpCode,
}

impl Instruction {
    pub fn decode_at(cart: &Cartridge, address: usize) -> Result<Self, DecodeError> {
        let op_code = OpCode::decode_at(cart, address)?;
        Ok(Self { address, op_code })
    }

    pub fn condition(&self) -> Option<Condition> {
        self.op_code.condition()
    }

    pub fn is_conditional(&self) -> bool {
        self.op_code.is_conditional()
    }

    pub fn jump_target(&self) -> Option<usize> {
        self.op_code.jump_target(self.address)
    }

    pub fn is_jump(&self) -> bool {
        self.op_code.is_jump()
    }

    pub fn can_continue(&self) -> bool {
        self.op_code.can_continue()
    }

    pub fn call_target(&self) -> Option<usize> {
        self.op_code.call_target(self.address)
    }

    pub fn is_call(&self) -> bool {
        self.op_code.is_call()
    }

    pub fn is_return(&self) -> bool {
        self.op_code.is_return()
    }

    pub fn size(&self) -> usize {
        self.op_code.size()
    }
}

#[allow(non_camel_case_types)]
#[derive(Clone, Copy, Debug)]
pub enum OpCode {
    NOP,
    LD_BC_d16(d16),
    LD_pBC_A,
    INC_BC,
    INC_B,
    DEC_B,
    LD_B_d8(d8),
    RLCA,
    LD_pa16_SP(a16),
    ADD_HL_BC,
    LD_A_pBC,
    DEC_BC,
    INC_C,
    DEC_C,
    LD_C_d8(d8),
    RRCA,
    STOP_0,
    LD_DE_d16(d16),
    LD_pDE_A,
    INC_DE,
    INC_D,
    DEC_D,
    LD_D_d8(d8),
    RLA,
    JR_r8(r8),
    ADD_HL_DE,
    LD_A_pDE,
    DEC_DE,
    INC_E,
    DEC_E,
    LD_E_d8(d8),
    RRA,
    JR_NZ_r8(r8),
    LD_HL_d16(d16),
    LD_pHLp_A,
    INC_HL,
    INC_H,
    DEC_H,
    LD_H_d8(d8),
    DAA,
    JR_Z_r8(r8),
    ADD_HL_HL,
    LD_A_pHLp,
    DEC_HL,
    INC_L,
    DEC_L,
    LD_L_d8(d8),
    CPL,
    JR_NC_r8(r8),
    LD_SP_d16(d16),
    LD_pHLm_A,
    INC_SP,
    INC_pHL,
    DEC_pHL,
    LD_pHL_d8(d8),
    SCF,
    JR_C_r8(r8),
    ADD_HL_SP,
    LD_A_pHLm,
    DEC_SP,
    INC_A,
    DEC_A,
    LD_A_d8(d8),
    CCF,
    LD_B_B,
    LD_B_C,
    LD_B_D,
    LD_B_E,
    LD_B_H,
    LD_B_L,
    LD_B_pHL,
    LD_B_A,
    LD_C_B,
    LD_C_C,
    LD_C_D,
    LD_C_E,
    LD_C_H,
    LD_C_L,
    LD_C_pHL,
    LD_C_A,
    LD_D_B,
    LD_D_C,
    LD_D_D,
    LD_D_E,
    LD_D_H,
    LD_D_L,
    LD_D_pHL,
    LD_D_A,
    LD_E_B,
    LD_E_C,
    LD_E_D,
    LD_E_E,
    LD_E_H,
    LD_E_L,
    LD_E_pHL,
    LD_E_A,
    LD_H_B,
    LD_H_C,
    LD_H_D,
    LD_H_E,
    LD_H_H,
    LD_H_L,
    LD_H_pHL,
    LD_H_A,
    LD_L_B,
    LD_L_C,
    LD_L_D,
    LD_L_E,
    LD_L_H,
    LD_L_L,
    LD_L_pHL,
    LD_L_A,
    LD_pHL_B,
    LD_pHL_C,
    LD_pHL_D,
    LD_pHL_E,
    LD_pHL_H,
    LD_pHL_L,
    HALT,
    LD_pHL_A,
    LD_A_B,
    LD_A_C,
    LD_A_D,
    LD_A_E,
    LD_A_H,
    LD_A_L,
    LD_A_pHL,
    LD_A_A,
    ADD_A_B,
    ADD_A_C,
    ADD_A_D,
    ADD_A_E,
    ADD_A_H,
    ADD_A_L,
    ADD_A_pHL,
    ADD_A_A,
    ADC_A_B,
    ADC_A_C,
    ADC_A_D,
    ADC_A_E,
    ADC_A_H,
    ADC_A_L,
    ADC_A_pHL,
    ADC_A_A,
    SUB_B,
    SUB_C,
    SUB_D,
    SUB_E,
    SUB_H,
    SUB_L,
    SUB_pHL,
    SUB_A,
    SBC_A_B,
    SBC_A_C,
    SBC_A_D,
    SBC_A_E,
    SBC_A_H,
    SBC_A_L,
    SBC_A_pHL,
    SBC_A_A,
    AND_B,
    AND_C,
    AND_D,
    AND_E,
    AND_H,
    AND_L,
    AND_pHL,
    AND_A,
    XOR_B,
    XOR_C,
    XOR_D,
    XOR_E,
    XOR_H,
    XOR_L,
    XOR_pHL,
    XOR_A,
    OR_B,
    OR_C,
    OR_D,
    OR_E,
    OR_H,
    OR_L,
    OR_pHL,
    OR_A,
    CP_B,
    CP_C,
    CP_D,
    CP_E,
    CP_H,
    CP_L,
    CP_pHL,
    CP_A,
    RET_NZ,
    POP_BC,
    JP_NZ_a16(a16),
    JP_a16(a16),
    CALL_NZ_a16(a16),
    PUSH_BC,
    ADD_A_d8(d8),
    RST_00H,
    RET_Z,
    RET,
    JP_Z_a16(a16),
    PREFIX_CB(CBOpCode),
    CALL_Z_a16(a16),
    CALL_a16(a16),
    ADC_A_d8(d8),
    RST_08H,
    RET_NC,
    POP_DE,
    JP_NC_a16(a16),
    CALL_NC_a16(a16),
    PUSH_DE,
    SUB_d8(d8),
    RST_10H,
    RET_C,
    RETI,
    JP_C_a16(a16),
    CALL_C_a16(a16),
    SBC_A_d8(d8),
    RST_18H,
    LDH_pa8_A(a8),
    POP_HL,
    LD_pC_A,
    PUSH_HL,
    AND_d8(d8),
    RST_20H,
    ADD_SP_r8(r8),
    JP_pHL,
    LD_pa16_A(a16),
    XOR_d8(d8),
    RST_28H,
    LDH_A_pa8(a8),
    POP_AF,
    LD_A_pC,
    DI,
    PUSH_AF,
    OR_d8(d8),
    RST_30H,
    LD_HL_SPp_r8(r8),
    LD_SP_HL,
    LD_A_pa16(a16),
    EI,
    CP_d8(d8),
    RST_38H,
}

#[allow(non_camel_case_types)]
#[derive(Clone, Copy, Debug)]
pub enum CBOpCode {
    RLC_B,
    RLC_C,
    RLC_D,
    RLC_E,
    RLC_H,
    RLC_L,
    RLC_pHL,
    RLC_A,
    RRC_B,
    RRC_C,
    RRC_D,
    RRC_E,
    RRC_H,
    RRC_L,
    RRC_pHL,
    RRC_A,
    RL_B,
    RL_C,
    RL_D,
    RL_E,
    RL_H,
    RL_L,
    RL_pHL,
    RL_A,
    RR_B,
    RR_C,
    RR_D,
    RR_E,
    RR_H,
    RR_L,
    RR_pHL,
    RR_A,
    SLA_B,
    SLA_C,
    SLA_D,
    SLA_E,
    SLA_H,
    SLA_L,
    SLA_pHL,
    SLA_A,
    SRA_B,
    SRA_C,
    SRA_D,
    SRA_E,
    SRA_H,
    SRA_L,
    SRA_pHL,
    SRA_A,
    SWAP_B,
    SWAP_C,
    SWAP_D,
    SWAP_E,
    SWAP_H,
    SWAP_L,
    SWAP_pHL,
    SWAP_A,
    SRL_B,
    SRL_C,
    SRL_D,
    SRL_E,
    SRL_H,
    SRL_L,
    SRL_pHL,
    SRL_A,
    BIT_0_B,
    BIT_0_C,
    BIT_0_D,
    BIT_0_E,
    BIT_0_H,
    BIT_0_L,
    BIT_0_pHL,
    BIT_0_A,
    BIT_1_B,
    BIT_1_C,
    BIT_1_D,
    BIT_1_E,
    BIT_1_H,
    BIT_1_L,
    BIT_1_pHL,
    BIT_1_A,
    BIT_2_B,
    BIT_2_C,
    BIT_2_D,
    BIT_2_E,
    BIT_2_H,
    BIT_2_L,
    BIT_2_pHL,
    BIT_2_A,
    BIT_3_B,
    BIT_3_C,
    BIT_3_D,
    BIT_3_E,
    BIT_3_H,
    BIT_3_L,
    BIT_3_pHL,
    BIT_3_A,
    BIT_4_B,
    BIT_4_C,
    BIT_4_D,
    BIT_4_E,
    BIT_4_H,
    BIT_4_L,
    BIT_4_pHL,
    BIT_4_A,
    BIT_5_B,
    BIT_5_C,
    BIT_5_D,
    BIT_5_E,
    BIT_5_H,
    BIT_5_L,
    BIT_5_pHL,
    BIT_5_A,
    BIT_6_B,
    BIT_6_C,
    BIT_6_D,
    BIT_6_E,
    BIT_6_H,
    BIT_6_L,
    BIT_6_pHL,
    BIT_6_A,
    BIT_7_B,
    BIT_7_C,
    BIT_7_D,
    BIT_7_E,
    BIT_7_H,
    BIT_7_L,
    BIT_7_pHL,
    BIT_7_A,
    RES_0_B,
    RES_0_C,
    RES_0_D,
    RES_0_E,
    RES_0_H,
    RES_0_L,
    RES_0_pHL,
    RES_0_A,
    RES_1_B,
    RES_1_C,
    RES_1_D,
    RES_1_E,
    RES_1_H,
    RES_1_L,
    RES_1_pHL,
    RES_1_A,
    RES_2_B,
    RES_2_C,
    RES_2_D,
    RES_2_E,
    RES_2_H,
    RES_2_L,
    RES_2_pHL,
    RES_2_A,
    RES_3_B,
    RES_3_C,
    RES_3_D,
    RES_3_E,
    RES_3_H,
    RES_3_L,
    RES_3_pHL,
    RES_3_A,
    RES_4_B,
    RES_4_C,
    RES_4_D,
    RES_4_E,
    RES_4_H,
    RES_4_L,
    RES_4_pHL,
    RES_4_A,
    RES_5_B,
    RES_5_C,
    RES_5_D,
    RES_5_E,
    RES_5_H,
    RES_5_L,
    RES_5_pHL,
    RES_5_A,
    RES_6_B,
    RES_6_C,
    RES_6_D,
    RES_6_E,
    RES_6_H,
    RES_6_L,
    RES_6_pHL,
    RES_6_A,
    RES_7_B,
    RES_7_C,
    RES_7_D,
    RES_7_E,
    RES_7_H,
    RES_7_L,
    RES_7_pHL,
    RES_7_A,
    SET_0_B,
    SET_0_C,
    SET_0_D,
    SET_0_E,
    SET_0_H,
    SET_0_L,
    SET_0_pHL,
    SET_0_A,
    SET_1_B,
    SET_1_C,
    SET_1_D,
    SET_1_E,
    SET_1_H,
    SET_1_L,
    SET_1_pHL,
    SET_1_A,
    SET_2_B,
    SET_2_C,
    SET_2_D,
    SET_2_E,
    SET_2_H,
    SET_2_L,
    SET_2_pHL,
    SET_2_A,
    SET_3_B,
    SET_3_C,
    SET_3_D,
    SET_3_E,
    SET_3_H,
    SET_3_L,
    SET_3_pHL,
    SET_3_A,
    SET_4_B,
    SET_4_C,
    SET_4_D,
    SET_4_E,
    SET_4_H,
    SET_4_L,
    SET_4_pHL,
    SET_4_A,
    SET_5_B,
    SET_5_C,
    SET_5_D,
    SET_5_E,
    SET_5_H,
    SET_5_L,
    SET_5_pHL,
    SET_5_A,
    SET_6_B,
    SET_6_C,
    SET_6_D,
    SET_6_E,
    SET_6_H,
    SET_6_L,
    SET_6_pHL,
    SET_6_A,
    SET_7_B,
    SET_7_C,
    SET_7_D,
    SET_7_E,
    SET_7_H,
    SET_7_L,
    SET_7_pHL,
    SET_7_A,
}

#[derive(Clone, Copy, PartialEq, Eq, Debug)]
pub enum Condition {
    NotZero,
    Zero,
    NoCarry,
    Carry,
}

impl OpCode {
    pub fn condition(&self) -> Option<Condition> {
        match self {
            OpCode::JR_NZ_r8(_)
            | OpCode::RET_NZ
            | OpCode::JP_NZ_a16(_)
            | OpCode::CALL_NZ_a16(_) => Some(Condition::NotZero),
            OpCode::JR_Z_r8(_) | OpCode::RET_Z | OpCode::JP_Z_a16(_) | OpCode::CALL_Z_a16(_) => {
                Some(Condition::Zero)
            }
            OpCode::JR_NC_r8(_)
            | OpCode::RET_NC
            | OpCode::JP_NC_a16(_)
            | OpCode::CALL_NC_a16(_) => Some(Condition::NoCarry),
            OpCode::JR_C_r8(_) | OpCode::RET_C | OpCode::JP_C_a16(_) | OpCode::CALL_C_a16(_) => {
                Some(Condition::Carry)
            }
            _ => None,
        }
    }

    pub fn is_conditional(&self) -> bool {
        self.condition().is_some()
    }

    pub fn jump_target(&self, address: usize) -> Option<usize> {
        match self {
            OpCode::JP_a16(a16)
            | OpCode::JP_C_a16(a16)
            | OpCode::JP_NC_a16(a16)
            | OpCode::JP_Z_a16(a16)
            | OpCode::JP_NZ_a16(a16) => Some(a16.value as usize),
            OpCode::JP_pHL => todo!("Trace dynamic jumps"),
            OpCode::JR_r8(r8)
            | OpCode::JR_C_r8(r8)
            | OpCode::JR_NC_r8(r8)
            | OpCode::JR_Z_r8(r8)
            | OpCode::JR_NZ_r8(r8) => Some((address as isize + r8.value as isize) as usize),
            _ => None,
        }
    }

    pub fn is_jump(&self) -> bool {
        self.jump_target(0).is_some()
    }

    pub fn can_continue(&self) -> bool {
        match self {
            OpCode::JP_a16(_)
            | OpCode::JP_pHL
            | OpCode::JR_r8(_)
            | OpCode::CALL_a16(_)
            | OpCode::RST_00H
            | OpCode::RST_08H
            | OpCode::RST_10H
            | OpCode::RST_18H
            | OpCode::RST_20H
            | OpCode::RST_28H
            | OpCode::RST_30H
            | OpCode::RST_38H
            | OpCode::RET
            | OpCode::RETI => false,
            _ => true,
        }
    }

    pub fn call_target(&self, address: usize) -> Option<usize> {
        match self {
            OpCode::CALL_a16(a16)
            | OpCode::CALL_C_a16(a16)
            | OpCode::CALL_NC_a16(a16)
            | OpCode::CALL_Z_a16(a16)
            | OpCode::CALL_NZ_a16(a16) => Some(a16.value as usize),
            OpCode::RST_00H => Some(0x00),
            OpCode::RST_08H => Some(0x08),
            OpCode::RST_10H => Some(0x10),
            OpCode::RST_18H => Some(0x18),
            OpCode::RST_20H => Some(0x20),
            OpCode::RST_28H => Some(0x28),
            OpCode::RST_30H => Some(0x30),
            OpCode::RST_38H => Some(0x38),
            _ => None,
        }
    }

    pub fn is_call(&self) -> bool {
        self.call_target(0).is_some()
    }

    pub fn is_return(&self) -> bool {
        match self {
            OpCode::RET
            | OpCode::RETI
            | OpCode::RET_C
            | OpCode::RET_NC
            | OpCode::RET_Z
            | OpCode::RET_NZ => true,
            _ => false,
        }
    }

    pub fn size(&self) -> usize {
        match *self {
            OpCode::NOP => 1,
            OpCode::LD_BC_d16(_) => 3,
            OpCode::LD_pBC_A => 1,
            OpCode::INC_BC => 1,
            OpCode::INC_B => 1,
            OpCode::DEC_B => 1,
            OpCode::LD_B_d8(_) => 2,
            OpCode::RLCA => 1,
            OpCode::LD_pa16_SP(_) => 3,
            OpCode::ADD_HL_BC => 1,
            OpCode::LD_A_pBC => 1,
            OpCode::DEC_BC => 1,
            OpCode::INC_C => 1,
            OpCode::DEC_C => 1,
            OpCode::LD_C_d8(_) => 2,
            OpCode::RRCA => 1,
            OpCode::STOP_0 => 1,
            OpCode::LD_DE_d16(_) => 3,
            OpCode::LD_pDE_A => 1,
            OpCode::INC_DE => 1,
            OpCode::INC_D => 1,
            OpCode::DEC_D => 1,
            OpCode::LD_D_d8(_) => 2,
            OpCode::RLA => 1,
            OpCode::JR_r8(_) => 2,
            OpCode::ADD_HL_DE => 1,
            OpCode::LD_A_pDE => 1,
            OpCode::DEC_DE => 1,
            OpCode::INC_E => 1,
            OpCode::DEC_E => 1,
            OpCode::LD_E_d8(_) => 2,
            OpCode::RRA => 1,
            OpCode::JR_NZ_r8(_) => 2,
            OpCode::LD_HL_d16(_) => 3,
            OpCode::LD_pHLp_A => 1,
            OpCode::INC_HL => 1,
            OpCode::INC_H => 1,
            OpCode::DEC_H => 1,
            OpCode::LD_H_d8(_) => 2,
            OpCode::DAA => 1,
            OpCode::JR_Z_r8(_) => 2,
            OpCode::ADD_HL_HL => 1,
            OpCode::LD_A_pHLp => 1,
            OpCode::DEC_HL => 1,
            OpCode::INC_L => 1,
            OpCode::DEC_L => 1,
            OpCode::LD_L_d8(_) => 2,
            OpCode::CPL => 1,
            OpCode::JR_NC_r8(_) => 2,
            OpCode::LD_SP_d16(_) => 3,
            OpCode::LD_pHLm_A => 1,
            OpCode::INC_SP => 1,
            OpCode::INC_pHL => 1,
            OpCode::DEC_pHL => 1,
            OpCode::LD_pHL_d8(_) => 2,
            OpCode::SCF => 1,
            OpCode::JR_C_r8(_) => 2,
            OpCode::ADD_HL_SP => 1,
            OpCode::LD_A_pHLm => 1,
            OpCode::DEC_SP => 1,
            OpCode::INC_A => 1,
            OpCode::DEC_A => 1,
            OpCode::LD_A_d8(_) => 2,
            OpCode::CCF => 1,
            OpCode::LD_B_B => 1,
            OpCode::LD_B_C => 1,
            OpCode::LD_B_D => 1,
            OpCode::LD_B_E => 1,
            OpCode::LD_B_H => 1,
            OpCode::LD_B_L => 1,
            OpCode::LD_B_pHL => 1,
            OpCode::LD_B_A => 1,
            OpCode::LD_C_B => 1,
            OpCode::LD_C_C => 1,
            OpCode::LD_C_D => 1,
            OpCode::LD_C_E => 1,
            OpCode::LD_C_H => 1,
            OpCode::LD_C_L => 1,
            OpCode::LD_C_pHL => 1,
            OpCode::LD_C_A => 1,
            OpCode::LD_D_B => 1,
            OpCode::LD_D_C => 1,
            OpCode::LD_D_D => 1,
            OpCode::LD_D_E => 1,
            OpCode::LD_D_H => 1,
            OpCode::LD_D_L => 1,
            OpCode::LD_D_pHL => 1,
            OpCode::LD_D_A => 1,
            OpCode::LD_E_B => 1,
            OpCode::LD_E_C => 1,
            OpCode::LD_E_D => 1,
            OpCode::LD_E_E => 1,
            OpCode::LD_E_H => 1,
            OpCode::LD_E_L => 1,
            OpCode::LD_E_pHL => 1,
            OpCode::LD_E_A => 1,
            OpCode::LD_H_B => 1,
            OpCode::LD_H_C => 1,
            OpCode::LD_H_D => 1,
            OpCode::LD_H_E => 1,
            OpCode::LD_H_H => 1,
            OpCode::LD_H_L => 1,
            OpCode::LD_H_pHL => 1,
            OpCode::LD_H_A => 1,
            OpCode::LD_L_B => 1,
            OpCode::LD_L_C => 1,
            OpCode::LD_L_D => 1,
            OpCode::LD_L_E => 1,
            OpCode::LD_L_H => 1,
            OpCode::LD_L_L => 1,
            OpCode::LD_L_pHL => 1,
            OpCode::LD_L_A => 1,
            OpCode::LD_pHL_B => 1,
            OpCode::LD_pHL_C => 1,
            OpCode::LD_pHL_D => 1,
            OpCode::LD_pHL_E => 1,
            OpCode::LD_pHL_H => 1,
            OpCode::LD_pHL_L => 1,
            OpCode::HALT => 1,
            OpCode::LD_pHL_A => 1,
            OpCode::LD_A_B => 1,
            OpCode::LD_A_C => 1,
            OpCode::LD_A_D => 1,
            OpCode::LD_A_E => 1,
            OpCode::LD_A_H => 1,
            OpCode::LD_A_L => 1,
            OpCode::LD_A_pHL => 1,
            OpCode::LD_A_A => 1,
            OpCode::ADD_A_B => 1,
            OpCode::ADD_A_C => 1,
            OpCode::ADD_A_D => 1,
            OpCode::ADD_A_E => 1,
            OpCode::ADD_A_H => 1,
            OpCode::ADD_A_L => 1,
            OpCode::ADD_A_pHL => 1,
            OpCode::ADD_A_A => 1,
            OpCode::ADC_A_B => 1,
            OpCode::ADC_A_C => 1,
            OpCode::ADC_A_D => 1,
            OpCode::ADC_A_E => 1,
            OpCode::ADC_A_H => 1,
            OpCode::ADC_A_L => 1,
            OpCode::ADC_A_pHL => 1,
            OpCode::ADC_A_A => 1,
            OpCode::SUB_B => 1,
            OpCode::SUB_C => 1,
            OpCode::SUB_D => 1,
            OpCode::SUB_E => 1,
            OpCode::SUB_H => 1,
            OpCode::SUB_L => 1,
            OpCode::SUB_pHL => 1,
            OpCode::SUB_A => 1,
            OpCode::SBC_A_B => 1,
            OpCode::SBC_A_C => 1,
            OpCode::SBC_A_D => 1,
            OpCode::SBC_A_E => 1,
            OpCode::SBC_A_H => 1,
            OpCode::SBC_A_L => 1,
            OpCode::SBC_A_pHL => 1,
            OpCode::SBC_A_A => 1,
            OpCode::AND_B => 1,
            OpCode::AND_C => 1,
            OpCode::AND_D => 1,
            OpCode::AND_E => 1,
            OpCode::AND_H => 1,
            OpCode::AND_L => 1,
            OpCode::AND_pHL => 1,
            OpCode::AND_A => 1,
            OpCode::XOR_B => 1,
            OpCode::XOR_C => 1,
            OpCode::XOR_D => 1,
            OpCode::XOR_E => 1,
            OpCode::XOR_H => 1,
            OpCode::XOR_L => 1,
            OpCode::XOR_pHL => 1,
            OpCode::XOR_A => 1,
            OpCode::OR_B => 1,
            OpCode::OR_C => 1,
            OpCode::OR_D => 1,
            OpCode::OR_E => 1,
            OpCode::OR_H => 1,
            OpCode::OR_L => 1,
            OpCode::OR_pHL => 1,
            OpCode::OR_A => 1,
            OpCode::CP_B => 1,
            OpCode::CP_C => 1,
            OpCode::CP_D => 1,
            OpCode::CP_E => 1,
            OpCode::CP_H => 1,
            OpCode::CP_L => 1,
            OpCode::CP_pHL => 1,
            OpCode::CP_A => 1,
            OpCode::RET_NZ => 1,
            OpCode::POP_BC => 1,
            OpCode::JP_NZ_a16(_) => 3,
            OpCode::JP_a16(_) => 3,
            OpCode::CALL_NZ_a16(_) => 3,
            OpCode::PUSH_BC => 1,
            OpCode::ADD_A_d8(_) => 2,
            OpCode::RST_00H => 1,
            OpCode::RET_Z => 1,
            OpCode::RET => 1,
            OpCode::JP_Z_a16(_) => 3,
            OpCode::PREFIX_CB(_) => 2,
            OpCode::CALL_Z_a16(_) => 3,
            OpCode::CALL_a16(_) => 3,
            OpCode::ADC_A_d8(_) => 2,
            OpCode::RST_08H => 1,
            OpCode::RET_NC => 1,
            OpCode::POP_DE => 1,
            OpCode::JP_NC_a16(_) => 3,
            OpCode::CALL_NC_a16(_) => 3,
            OpCode::PUSH_DE => 1,
            OpCode::SUB_d8(_) => 2,
            OpCode::RST_10H => 1,
            OpCode::RET_C => 1,
            OpCode::RETI => 1,
            OpCode::JP_C_a16(_) => 3,
            OpCode::CALL_C_a16(_) => 3,
            OpCode::SBC_A_d8(_) => 2,
            OpCode::RST_18H => 1,
            OpCode::LDH_pa8_A(_) => 2,
            OpCode::POP_HL => 1,
            OpCode::LD_pC_A => 1,
            OpCode::PUSH_HL => 1,
            OpCode::AND_d8(_) => 2,
            OpCode::RST_20H => 1,
            OpCode::ADD_SP_r8(_) => 2,
            OpCode::JP_pHL => 1,
            OpCode::LD_pa16_A(_) => 3,
            OpCode::XOR_d8(_) => 2,
            OpCode::RST_28H => 1,
            OpCode::LDH_A_pa8(_) => 2,
            OpCode::POP_AF => 1,
            OpCode::LD_A_pC => 1,
            OpCode::DI => 1,
            OpCode::PUSH_AF => 1,
            OpCode::OR_d8(_) => 2,
            OpCode::RST_30H => 1,
            OpCode::LD_HL_SPp_r8(_) => 2,
            OpCode::LD_SP_HL => 1,
            OpCode::LD_A_pa16(_) => 3,
            OpCode::EI => 1,
            OpCode::CP_d8(_) => 2,
            OpCode::RST_38H => 1,
        }
    }
}

impl fmt::Display for OpCode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            OpCode::NOP => write!(f, "NOP"),
            OpCode::LD_BC_d16(value) => write!(f, "LD BC,{}", value),
            OpCode::LD_pBC_A => write!(f, "LD (BC),A"),
            OpCode::INC_BC => write!(f, "INC BC"),
            OpCode::INC_B => write!(f, "INC B"),
            OpCode::DEC_B => write!(f, "DEC B"),
            OpCode::LD_B_d8(value) => write!(f, "LD B,{}", value),
            OpCode::RLCA => write!(f, "RLCA"),
            OpCode::LD_pa16_SP(value) => write!(f, "LD ({}),SP", value),
            OpCode::ADD_HL_BC => write!(f, "ADD HL,BC"),
            OpCode::LD_A_pBC => write!(f, "LD A,(BC)"),
            OpCode::DEC_BC => write!(f, "DEC BC"),
            OpCode::INC_C => write!(f, "INC C"),
            OpCode::DEC_C => write!(f, "DEC C"),
            OpCode::LD_C_d8(value) => write!(f, "LD C,{}", value),
            OpCode::RRCA => write!(f, "RRCA"),

            OpCode::STOP_0 => write!(f, "STOP 0"),
            OpCode::LD_DE_d16(value) => write!(f, "LD DE,{}", value),
            OpCode::LD_pDE_A => write!(f, "LD (DE),A"),
            OpCode::INC_DE => write!(f, "INC DE"),
            OpCode::INC_D => write!(f, "INC D"),
            OpCode::DEC_D => write!(f, "DEC D"),
            OpCode::LD_D_d8(value) => write!(f, "LD D,{}", value),
            OpCode::RLA => write!(f, "RLA"),
            OpCode::JR_r8(value) => write!(f, "JR {}", value),
            OpCode::ADD_HL_DE => write!(f, "ADD HL,DE"),
            OpCode::LD_A_pDE => write!(f, "LD A,(DE)"),
            OpCode::DEC_DE => write!(f, "DEC DE"),
            OpCode::INC_E => write!(f, "INC E"),
            OpCode::DEC_E => write!(f, "DEC E"),
            OpCode::LD_E_d8(value) => write!(f, "LD E,{}", value),
            OpCode::RRA => write!(f, "RRA"),

            OpCode::JR_NZ_r8(value) => write!(f, "JR NZ,{}", value),
            OpCode::LD_HL_d16(value) => write!(f, "LD HL,{}", value),
            OpCode::LD_pHLp_A => write!(f, "LD (HL+),A"),
            OpCode::INC_HL => write!(f, "INC HL"),
            OpCode::INC_H => write!(f, "INC H"),
            OpCode::DEC_H => write!(f, "DEC H"),
            OpCode::LD_H_d8(value) => write!(f, "LD H,{}", value),
            OpCode::DAA => write!(f, "DAA"),
            OpCode::JR_Z_r8(value) => write!(f, "JR Z,{}", value),
            OpCode::ADD_HL_HL => write!(f, "ADD HL,HL"),
            OpCode::LD_A_pHLp => write!(f, "LD A,(HL+)"),
            OpCode::DEC_HL => write!(f, "DEC HL"),
            OpCode::INC_L => write!(f, "INC L"),
            OpCode::DEC_L => write!(f, "DEC L"),
            OpCode::LD_L_d8(value) => write!(f, "LD L,{}", value),
            OpCode::CPL => write!(f, "CPL"),

            OpCode::JR_NC_r8(value) => write!(f, "JR NC,{}", value),
            OpCode::LD_SP_d16(value) => write!(f, "LD SP,{}", value),
            OpCode::LD_pHLm_A => write!(f, "LD (HL-),A"),
            OpCode::INC_SP => write!(f, "INC SP"),
            OpCode::INC_pHL => write!(f, "INC (HL)"),
            OpCode::DEC_pHL => write!(f, "DEC (HL)"),
            OpCode::LD_pHL_d8(value) => write!(f, "LD (HL),{}", value),
            OpCode::SCF => write!(f, "SCF"),
            OpCode::JR_C_r8(value) => write!(f, "JR C,{}", value),
            OpCode::ADD_HL_SP => write!(f, "ADD HL,SP"),
            OpCode::LD_A_pHLm => write!(f, "LD A,(HL-)"),
            OpCode::DEC_SP => write!(f, "DEC SP"),
            OpCode::INC_A => write!(f, "INC A"),
            OpCode::DEC_A => write!(f, "DEC A"),
            OpCode::LD_A_d8(value) => write!(f, "LD A,{}", value),
            OpCode::CCF => write!(f, "CCF"),

            OpCode::LD_B_B => write!(f, "LD B,B"),
            OpCode::LD_B_C => write!(f, "LD B,C"),
            OpCode::LD_B_D => write!(f, "LD B,D"),
            OpCode::LD_B_E => write!(f, "LD B,E"),
            OpCode::LD_B_H => write!(f, "LD B,H"),
            OpCode::LD_B_L => write!(f, "LD B,L"),
            OpCode::LD_B_pHL => write!(f, "LD B,(HL)"),
            OpCode::LD_B_A => write!(f, "LD B,A"),
            OpCode::LD_C_B => write!(f, "LD C,B"),
            OpCode::LD_C_C => write!(f, "LD C,C"),
            OpCode::LD_C_D => write!(f, "LD C,D"),
            OpCode::LD_C_E => write!(f, "LD C,E"),
            OpCode::LD_C_H => write!(f, "LD C,H"),
            OpCode::LD_C_L => write!(f, "LD C,L"),
            OpCode::LD_C_pHL => write!(f, "LD C,(HL)"),
            OpCode::LD_C_A => write!(f, "LD C,A"),

            OpCode::LD_D_B => write!(f, "LD D,B"),
            OpCode::LD_D_C => write!(f, "LD D,C"),
            OpCode::LD_D_D => write!(f, "LD D,D"),
            OpCode::LD_D_E => write!(f, "LD D,E"),
            OpCode::LD_D_H => write!(f, "LD D,H"),
            OpCode::LD_D_L => write!(f, "LD D,L"),
            OpCode::LD_D_pHL => write!(f, "LD D,(HL)"),
            OpCode::LD_D_A => write!(f, "LD D,A"),
            OpCode::LD_E_B => write!(f, "LD E,B"),
            OpCode::LD_E_C => write!(f, "LD E,C"),
            OpCode::LD_E_D => write!(f, "LD E,D"),
            OpCode::LD_E_E => write!(f, "LD E,E"),
            OpCode::LD_E_H => write!(f, "LD E,H"),
            OpCode::LD_E_L => write!(f, "LD E,L"),
            OpCode::LD_E_pHL => write!(f, "LD E,(HL)"),
            OpCode::LD_E_A => write!(f, "LD E,A"),

            OpCode::LD_H_B => write!(f, "LD H,B"),
            OpCode::LD_H_C => write!(f, "LD H,C"),
            OpCode::LD_H_D => write!(f, "LD H,D"),
            OpCode::LD_H_E => write!(f, "LD H,E"),
            OpCode::LD_H_H => write!(f, "LD H,H"),
            OpCode::LD_H_L => write!(f, "LD H,L"),
            OpCode::LD_H_pHL => write!(f, "LD H,(HL)"),
            OpCode::LD_H_A => write!(f, "LD H,A"),
            OpCode::LD_L_B => write!(f, "LD L,B"),
            OpCode::LD_L_C => write!(f, "LD L,C"),
            OpCode::LD_L_D => write!(f, "LD L,D"),
            OpCode::LD_L_E => write!(f, "LD L,E"),
            OpCode::LD_L_H => write!(f, "LD L,H"),
            OpCode::LD_L_L => write!(f, "LD L,L"),
            OpCode::LD_L_pHL => write!(f, "LD L,(HL)"),
            OpCode::LD_L_A => write!(f, "LD L,A"),

            OpCode::LD_pHL_B => write!(f, "LD (HL),B"),
            OpCode::LD_pHL_C => write!(f, "LD (HL),C"),
            OpCode::LD_pHL_D => write!(f, "LD (HL),D"),
            OpCode::LD_pHL_E => write!(f, "LD (HL),E"),
            OpCode::LD_pHL_H => write!(f, "LD (HL),H"),
            OpCode::LD_pHL_L => write!(f, "LD (HL),L"),
            OpCode::HALT => write!(f, "HALT"),
            OpCode::LD_pHL_A => write!(f, "LD (HL),A"),
            OpCode::LD_A_B => write!(f, "LD A,B"),
            OpCode::LD_A_C => write!(f, "LD A,C"),
            OpCode::LD_A_D => write!(f, "LD A,D"),
            OpCode::LD_A_E => write!(f, "LD A,E"),
            OpCode::LD_A_H => write!(f, "LD A,H"),
            OpCode::LD_A_L => write!(f, "LD A,L"),
            OpCode::LD_A_pHL => write!(f, "LD A,(HL)"),
            OpCode::LD_A_A => write!(f, "LD A,A"),

            OpCode::ADD_A_B => write!(f, "ADD A,B"),
            OpCode::ADD_A_C => write!(f, "ADD A,C"),
            OpCode::ADD_A_D => write!(f, "ADD A,D"),
            OpCode::ADD_A_E => write!(f, "ADD A,E"),
            OpCode::ADD_A_H => write!(f, "ADD A,H"),
            OpCode::ADD_A_L => write!(f, "ADD A,L"),
            OpCode::ADD_A_pHL => write!(f, "ADD A,(HL)"),
            OpCode::ADD_A_A => write!(f, "ADD A,A"),
            OpCode::ADC_A_B => write!(f, "ADC A,B"),
            OpCode::ADC_A_C => write!(f, "ADC A,C"),
            OpCode::ADC_A_D => write!(f, "ADC A,D"),
            OpCode::ADC_A_E => write!(f, "ADC A,E"),
            OpCode::ADC_A_H => write!(f, "ADC A,H"),
            OpCode::ADC_A_L => write!(f, "ADC A,L"),
            OpCode::ADC_A_pHL => write!(f, "ADC A,(HL)"),
            OpCode::ADC_A_A => write!(f, "ADC A,A"),

            OpCode::SUB_B => write!(f, "SUB B"),
            OpCode::SUB_C => write!(f, "SUB C"),
            OpCode::SUB_D => write!(f, "SUB D"),
            OpCode::SUB_E => write!(f, "SUB E"),
            OpCode::SUB_H => write!(f, "SUB H"),
            OpCode::SUB_L => write!(f, "SUB L"),
            OpCode::SUB_pHL => write!(f, "SUB (HL)"),
            OpCode::SUB_A => write!(f, "SUB A"),
            OpCode::SBC_A_B => write!(f, "SBC A,B"),
            OpCode::SBC_A_C => write!(f, "SBC A,C"),
            OpCode::SBC_A_D => write!(f, "SBC A,D"),
            OpCode::SBC_A_E => write!(f, "SBC A,E"),
            OpCode::SBC_A_H => write!(f, "SBC A,H"),
            OpCode::SBC_A_L => write!(f, "SBC A,L"),
            OpCode::SBC_A_pHL => write!(f, "SBC A,(HL)"),
            OpCode::SBC_A_A => write!(f, "SBC A,A"),

            OpCode::AND_B => write!(f, "AND B"),
            OpCode::AND_C => write!(f, "AND C"),
            OpCode::AND_D => write!(f, "AND D"),
            OpCode::AND_E => write!(f, "AND E"),
            OpCode::AND_H => write!(f, "AND H"),
            OpCode::AND_L => write!(f, "AND L"),
            OpCode::AND_pHL => write!(f, "AND (HL)"),
            OpCode::AND_A => write!(f, "AND A"),
            OpCode::XOR_B => write!(f, "XOR B"),
            OpCode::XOR_C => write!(f, "XOR C"),
            OpCode::XOR_D => write!(f, "XOR D"),
            OpCode::XOR_E => write!(f, "XOR E"),
            OpCode::XOR_H => write!(f, "XOR H"),
            OpCode::XOR_L => write!(f, "XOR L"),
            OpCode::XOR_pHL => write!(f, "XOR (HL)"),
            OpCode::XOR_A => write!(f, "XOR A"),

            OpCode::OR_B => write!(f, "OR B"),
            OpCode::OR_C => write!(f, "OR C"),
            OpCode::OR_D => write!(f, "OR D"),
            OpCode::OR_E => write!(f, "OR E"),
            OpCode::OR_H => write!(f, "OR H"),
            OpCode::OR_L => write!(f, "OR L"),
            OpCode::OR_pHL => write!(f, "OR (HL)"),
            OpCode::OR_A => write!(f, "OR A"),
            OpCode::CP_B => write!(f, "CP B"),
            OpCode::CP_C => write!(f, "CP C"),
            OpCode::CP_D => write!(f, "CP D"),
            OpCode::CP_E => write!(f, "CP E"),
            OpCode::CP_H => write!(f, "CP H"),
            OpCode::CP_L => write!(f, "CP L"),
            OpCode::CP_pHL => write!(f, "CP (HL)"),
            OpCode::CP_A => write!(f, "CP A"),

            OpCode::RET_NZ => write!(f, "RET NZ"),
            OpCode::POP_BC => write!(f, "POP BC"),
            OpCode::JP_NZ_a16(value) => write!(f, "JP NZ,{}", value),
            OpCode::JP_a16(value) => write!(f, "JP {}", value),
            OpCode::CALL_NZ_a16(value) => write!(f, "CALL NZ,{}", value),
            OpCode::PUSH_BC => write!(f, "PUSH BC"),
            OpCode::ADD_A_d8(value) => write!(f, "ADD A,{}", value),
            OpCode::RST_00H => write!(f, "RST 00H"),
            OpCode::RET_Z => write!(f, "RET Z"),
            OpCode::RET => write!(f, "RET"),
            OpCode::JP_Z_a16(value) => write!(f, "JP Z,{}", value),
            OpCode::PREFIX_CB(value) => value.fmt(f),
            OpCode::CALL_Z_a16(value) => write!(f, "CALL Z,{}", value),
            OpCode::CALL_a16(value) => write!(f, "CALL {}", value),
            OpCode::ADC_A_d8(value) => write!(f, "ADC A,{}", value),
            OpCode::RST_08H => write!(f, "RST 08H"),

            OpCode::RET_NC => write!(f, "RET NC"),
            OpCode::POP_DE => write!(f, "POP DE"),
            OpCode::JP_NC_a16(value) => write!(f, "JP NC,{}", value),
            OpCode::CALL_NC_a16(value) => write!(f, "CALL NC,{}", value),
            OpCode::PUSH_DE => write!(f, "PUSH DE"),
            OpCode::SUB_d8(value) => write!(f, "SUB {}", value),
            OpCode::RST_10H => write!(f, "RST 10H"),
            OpCode::RET_C => write!(f, "RET C"),
            OpCode::RETI => write!(f, "RETI"),
            OpCode::JP_C_a16(value) => write!(f, "JP C,{}", value),
            OpCode::CALL_C_a16(value) => write!(f, "CALL C,{}", value),
            OpCode::SBC_A_d8(value) => write!(f, "SBC A,{}", value),
            OpCode::RST_18H => write!(f, "RST 18H"),

            OpCode::LDH_pa8_A(value) => write!(f, "LDH ({}),A", value),
            OpCode::POP_HL => write!(f, "POP HL"),
            OpCode::LD_pC_A => write!(f, "LD (C),A"),
            OpCode::PUSH_HL => write!(f, "PUSH HL"),
            OpCode::AND_d8(value) => write!(f, "AND {}", value),
            OpCode::RST_20H => write!(f, "RST 20H"),
            OpCode::ADD_SP_r8(value) => write!(f, "ADD SP,{}", value),
            OpCode::JP_pHL => write!(f, "JP (HL)"),
            OpCode::LD_pa16_A(value) => write!(f, "LD ({}),A", value),
            OpCode::XOR_d8(value) => write!(f, "XOR {}", value),
            OpCode::RST_28H => write!(f, "RST 28H"),

            OpCode::LDH_A_pa8(value) => write!(f, "LDH A,({})", value),
            OpCode::POP_AF => write!(f, "POP AF"),
            OpCode::LD_A_pC => write!(f, "LD A,(C)"),
            OpCode::DI => write!(f, "DI"),
            OpCode::PUSH_AF => write!(f, "PUSH AF"),
            OpCode::OR_d8(value) => write!(f, "OR {}", value),
            OpCode::RST_30H => write!(f, "RST 30H"),
            OpCode::LD_HL_SPp_r8(value) => write!(f, "LD HL,SP+{}", value),
            OpCode::LD_SP_HL => write!(f, "LD SP,HL"),
            OpCode::LD_A_pa16(value) => write!(f, "LD A,({})", value),
            OpCode::EI => write!(f, "EI"),
            OpCode::CP_d8(value) => write!(f, "CP {}", value),
            OpCode::RST_38H => write!(f, "RST 38H"),
        }
    }
}

impl fmt::Display for CBOpCode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            CBOpCode::RLC_B => write!(f, "RLC B"),
            CBOpCode::RLC_C => write!(f, "RLC C"),
            CBOpCode::RLC_D => write!(f, "RLC D"),
            CBOpCode::RLC_E => write!(f, "RLC E"),
            CBOpCode::RLC_H => write!(f, "RLC H"),
            CBOpCode::RLC_L => write!(f, "RLC L"),
            CBOpCode::RLC_pHL => write!(f, "RLC (pHL)"),
            CBOpCode::RLC_A => write!(f, "RLC A"),
            CBOpCode::RRC_B => write!(f, "RRC B"),
            CBOpCode::RRC_C => write!(f, "RRC C"),
            CBOpCode::RRC_D => write!(f, "RRC D"),
            CBOpCode::RRC_E => write!(f, "RRC E"),
            CBOpCode::RRC_H => write!(f, "RRC H"),
            CBOpCode::RRC_L => write!(f, "RRC L"),
            CBOpCode::RRC_pHL => write!(f, "RRC (pHL)"),
            CBOpCode::RRC_A => write!(f, "RRC A"),
            CBOpCode::RL_B => write!(f, "RL B"),
            CBOpCode::RL_C => write!(f, "RL C"),
            CBOpCode::RL_D => write!(f, "RL D"),
            CBOpCode::RL_E => write!(f, "RL E"),
            CBOpCode::RL_H => write!(f, "RL H"),
            CBOpCode::RL_L => write!(f, "RL L"),
            CBOpCode::RL_pHL => write!(f, "RL (pHL)"),
            CBOpCode::RL_A => write!(f, "RL A"),
            CBOpCode::RR_B => write!(f, "RR B"),
            CBOpCode::RR_C => write!(f, "RR C"),
            CBOpCode::RR_D => write!(f, "RR D"),
            CBOpCode::RR_E => write!(f, "RR E"),
            CBOpCode::RR_H => write!(f, "RR H"),
            CBOpCode::RR_L => write!(f, "RR L"),
            CBOpCode::RR_pHL => write!(f, "RR (pHL)"),
            CBOpCode::RR_A => write!(f, "RR A"),
            CBOpCode::SLA_B => write!(f, "SLA B"),
            CBOpCode::SLA_C => write!(f, "SLA C"),
            CBOpCode::SLA_D => write!(f, "SLA D"),
            CBOpCode::SLA_E => write!(f, "SLA E"),
            CBOpCode::SLA_H => write!(f, "SLA H"),
            CBOpCode::SLA_L => write!(f, "SLA L"),
            CBOpCode::SLA_pHL => write!(f, "SLA (pHL)"),
            CBOpCode::SLA_A => write!(f, "SLA A"),
            CBOpCode::SRA_B => write!(f, "SRA B"),
            CBOpCode::SRA_C => write!(f, "SRA C"),
            CBOpCode::SRA_D => write!(f, "SRA D"),
            CBOpCode::SRA_E => write!(f, "SRA E"),
            CBOpCode::SRA_H => write!(f, "SRA H"),
            CBOpCode::SRA_L => write!(f, "SRA L"),
            CBOpCode::SRA_pHL => write!(f, "SRA (pHL)"),
            CBOpCode::SRA_A => write!(f, "SRA A"),
            CBOpCode::SWAP_B => write!(f, "SWAP B"),
            CBOpCode::SWAP_C => write!(f, "SWAP C"),
            CBOpCode::SWAP_D => write!(f, "SWAP D"),
            CBOpCode::SWAP_E => write!(f, "SWAP E"),
            CBOpCode::SWAP_H => write!(f, "SWAP H"),
            CBOpCode::SWAP_L => write!(f, "SWAP L"),
            CBOpCode::SWAP_pHL => write!(f, "SWAP (pHL)"),
            CBOpCode::SWAP_A => write!(f, "SWAP A"),
            CBOpCode::SRL_B => write!(f, "SRL B"),
            CBOpCode::SRL_C => write!(f, "SRL C"),
            CBOpCode::SRL_D => write!(f, "SRL D"),
            CBOpCode::SRL_E => write!(f, "SRL E"),
            CBOpCode::SRL_H => write!(f, "SRL H"),
            CBOpCode::SRL_L => write!(f, "SRL L"),
            CBOpCode::SRL_pHL => write!(f, "SRL (pHL)"),
            CBOpCode::SRL_A => write!(f, "SRL A"),
            CBOpCode::BIT_0_B => write!(f, "BIT 0,B"),
            CBOpCode::BIT_0_C => write!(f, "BIT 0,C"),
            CBOpCode::BIT_0_D => write!(f, "BIT 0,D"),
            CBOpCode::BIT_0_E => write!(f, "BIT 0,E"),
            CBOpCode::BIT_0_H => write!(f, "BIT 0,H"),
            CBOpCode::BIT_0_L => write!(f, "BIT 0,L"),
            CBOpCode::BIT_0_pHL => write!(f, "BIT 0,(pHL)"),
            CBOpCode::BIT_0_A => write!(f, "BIT 0,A"),
            CBOpCode::BIT_1_B => write!(f, "BIT 1,B"),
            CBOpCode::BIT_1_C => write!(f, "BIT 1,C"),
            CBOpCode::BIT_1_D => write!(f, "BIT 1,D"),
            CBOpCode::BIT_1_E => write!(f, "BIT 1,E"),
            CBOpCode::BIT_1_H => write!(f, "BIT 1,H"),
            CBOpCode::BIT_1_L => write!(f, "BIT 1,L"),
            CBOpCode::BIT_1_pHL => write!(f, "BIT 1,(pHL)"),
            CBOpCode::BIT_1_A => write!(f, "BIT 1,A"),
            CBOpCode::BIT_2_B => write!(f, "BIT 2,B"),
            CBOpCode::BIT_2_C => write!(f, "BIT 2,C"),
            CBOpCode::BIT_2_D => write!(f, "BIT 2,D"),
            CBOpCode::BIT_2_E => write!(f, "BIT 2,E"),
            CBOpCode::BIT_2_H => write!(f, "BIT 2,H"),
            CBOpCode::BIT_2_L => write!(f, "BIT 2,L"),
            CBOpCode::BIT_2_pHL => write!(f, "BIT 2,(pHL)"),
            CBOpCode::BIT_2_A => write!(f, "BIT 2,A"),
            CBOpCode::BIT_3_B => write!(f, "BIT 3,B"),
            CBOpCode::BIT_3_C => write!(f, "BIT 3,C"),
            CBOpCode::BIT_3_D => write!(f, "BIT 3,D"),
            CBOpCode::BIT_3_E => write!(f, "BIT 3,E"),
            CBOpCode::BIT_3_H => write!(f, "BIT 3,H"),
            CBOpCode::BIT_3_L => write!(f, "BIT 3,L"),
            CBOpCode::BIT_3_pHL => write!(f, "BIT 3,(pHL)"),
            CBOpCode::BIT_3_A => write!(f, "BIT 3,A"),
            CBOpCode::BIT_4_B => write!(f, "BIT 4,B"),
            CBOpCode::BIT_4_C => write!(f, "BIT 4,C"),
            CBOpCode::BIT_4_D => write!(f, "BIT 4,D"),
            CBOpCode::BIT_4_E => write!(f, "BIT 4,E"),
            CBOpCode::BIT_4_H => write!(f, "BIT 4,H"),
            CBOpCode::BIT_4_L => write!(f, "BIT 4,L"),
            CBOpCode::BIT_4_pHL => write!(f, "BIT 4,(pHL)"),
            CBOpCode::BIT_4_A => write!(f, "BIT 4,A"),
            CBOpCode::BIT_5_B => write!(f, "BIT 5,B"),
            CBOpCode::BIT_5_C => write!(f, "BIT 5,C"),
            CBOpCode::BIT_5_D => write!(f, "BIT 5,D"),
            CBOpCode::BIT_5_E => write!(f, "BIT 5,E"),
            CBOpCode::BIT_5_H => write!(f, "BIT 5,H"),
            CBOpCode::BIT_5_L => write!(f, "BIT 5,L"),
            CBOpCode::BIT_5_pHL => write!(f, "BIT 5,(pHL)"),
            CBOpCode::BIT_5_A => write!(f, "BIT 5,A"),
            CBOpCode::BIT_6_B => write!(f, "BIT 6,B"),
            CBOpCode::BIT_6_C => write!(f, "BIT 6,C"),
            CBOpCode::BIT_6_D => write!(f, "BIT 6,D"),
            CBOpCode::BIT_6_E => write!(f, "BIT 6,E"),
            CBOpCode::BIT_6_H => write!(f, "BIT 6,H"),
            CBOpCode::BIT_6_L => write!(f, "BIT 6,L"),
            CBOpCode::BIT_6_pHL => write!(f, "BIT 6,(pHL)"),
            CBOpCode::BIT_6_A => write!(f, "BIT 6,A"),
            CBOpCode::BIT_7_B => write!(f, "BIT 7,B"),
            CBOpCode::BIT_7_C => write!(f, "BIT 7,C"),
            CBOpCode::BIT_7_D => write!(f, "BIT 7,D"),
            CBOpCode::BIT_7_E => write!(f, "BIT 7,E"),
            CBOpCode::BIT_7_H => write!(f, "BIT 7,H"),
            CBOpCode::BIT_7_L => write!(f, "BIT 7,L"),
            CBOpCode::BIT_7_pHL => write!(f, "BIT 7,(pHL)"),
            CBOpCode::BIT_7_A => write!(f, "BIT 7,A"),
            CBOpCode::RES_0_B => write!(f, "RES 0,B"),
            CBOpCode::RES_0_C => write!(f, "RES 0,C"),
            CBOpCode::RES_0_D => write!(f, "RES 0,D"),
            CBOpCode::RES_0_E => write!(f, "RES 0,E"),
            CBOpCode::RES_0_H => write!(f, "RES 0,H"),
            CBOpCode::RES_0_L => write!(f, "RES 0,L"),
            CBOpCode::RES_0_pHL => write!(f, "RES 0,(pHL)"),
            CBOpCode::RES_0_A => write!(f, "RES 0,A"),
            CBOpCode::RES_1_B => write!(f, "RES 1,B"),
            CBOpCode::RES_1_C => write!(f, "RES 1,C"),
            CBOpCode::RES_1_D => write!(f, "RES 1,D"),
            CBOpCode::RES_1_E => write!(f, "RES 1,E"),
            CBOpCode::RES_1_H => write!(f, "RES 1,H"),
            CBOpCode::RES_1_L => write!(f, "RES 1,L"),
            CBOpCode::RES_1_pHL => write!(f, "RES 1,(pHL)"),
            CBOpCode::RES_1_A => write!(f, "RES 1,A"),
            CBOpCode::RES_2_B => write!(f, "RES 2,B"),
            CBOpCode::RES_2_C => write!(f, "RES 2,C"),
            CBOpCode::RES_2_D => write!(f, "RES 2,D"),
            CBOpCode::RES_2_E => write!(f, "RES 2,E"),
            CBOpCode::RES_2_H => write!(f, "RES 2,H"),
            CBOpCode::RES_2_L => write!(f, "RES 2,L"),
            CBOpCode::RES_2_pHL => write!(f, "RES 2,(pHL)"),
            CBOpCode::RES_2_A => write!(f, "RES 2,A"),
            CBOpCode::RES_3_B => write!(f, "RES 3,B"),
            CBOpCode::RES_3_C => write!(f, "RES 3,C"),
            CBOpCode::RES_3_D => write!(f, "RES 3,D"),
            CBOpCode::RES_3_E => write!(f, "RES 3,E"),
            CBOpCode::RES_3_H => write!(f, "RES 3,H"),
            CBOpCode::RES_3_L => write!(f, "RES 3,L"),
            CBOpCode::RES_3_pHL => write!(f, "RES 3,(pHL)"),
            CBOpCode::RES_3_A => write!(f, "RES 3,A"),
            CBOpCode::RES_4_B => write!(f, "RES 4,B"),
            CBOpCode::RES_4_C => write!(f, "RES 4,C"),
            CBOpCode::RES_4_D => write!(f, "RES 4,D"),
            CBOpCode::RES_4_E => write!(f, "RES 4,E"),
            CBOpCode::RES_4_H => write!(f, "RES 4,H"),
            CBOpCode::RES_4_L => write!(f, "RES 4,L"),
            CBOpCode::RES_4_pHL => write!(f, "RES 4,(pHL)"),
            CBOpCode::RES_4_A => write!(f, "RES 4,A"),
            CBOpCode::RES_5_B => write!(f, "RES 5,B"),
            CBOpCode::RES_5_C => write!(f, "RES 5,C"),
            CBOpCode::RES_5_D => write!(f, "RES 5,D"),
            CBOpCode::RES_5_E => write!(f, "RES 5,E"),
            CBOpCode::RES_5_H => write!(f, "RES 5,H"),
            CBOpCode::RES_5_L => write!(f, "RES 5,L"),
            CBOpCode::RES_5_pHL => write!(f, "RES 5,(pHL)"),
            CBOpCode::RES_5_A => write!(f, "RES 5,A"),
            CBOpCode::RES_6_B => write!(f, "RES 6,B"),
            CBOpCode::RES_6_C => write!(f, "RES 6,C"),
            CBOpCode::RES_6_D => write!(f, "RES 6,D"),
            CBOpCode::RES_6_E => write!(f, "RES 6,E"),
            CBOpCode::RES_6_H => write!(f, "RES 6,H"),
            CBOpCode::RES_6_L => write!(f, "RES 6,L"),
            CBOpCode::RES_6_pHL => write!(f, "RES 6,(pHL)"),
            CBOpCode::RES_6_A => write!(f, "RES 6,A"),
            CBOpCode::RES_7_B => write!(f, "RES 7,B"),
            CBOpCode::RES_7_C => write!(f, "RES 7,C"),
            CBOpCode::RES_7_D => write!(f, "RES 7,D"),
            CBOpCode::RES_7_E => write!(f, "RES 7,E"),
            CBOpCode::RES_7_H => write!(f, "RES 7,H"),
            CBOpCode::RES_7_L => write!(f, "RES 7,L"),
            CBOpCode::RES_7_pHL => write!(f, "RES 7,(pHL)"),
            CBOpCode::RES_7_A => write!(f, "RES 7,A"),
            CBOpCode::SET_0_B => write!(f, "SET 0,B"),
            CBOpCode::SET_0_C => write!(f, "SET 0,C"),
            CBOpCode::SET_0_D => write!(f, "SET 0,D"),
            CBOpCode::SET_0_E => write!(f, "SET 0,E"),
            CBOpCode::SET_0_H => write!(f, "SET 0,H"),
            CBOpCode::SET_0_L => write!(f, "SET 0,L"),
            CBOpCode::SET_0_pHL => write!(f, "SET 0,(pHL)"),
            CBOpCode::SET_0_A => write!(f, "SET 0,A"),
            CBOpCode::SET_1_B => write!(f, "SET 1,B"),
            CBOpCode::SET_1_C => write!(f, "SET 1,C"),
            CBOpCode::SET_1_D => write!(f, "SET 1,D"),
            CBOpCode::SET_1_E => write!(f, "SET 1,E"),
            CBOpCode::SET_1_H => write!(f, "SET 1,H"),
            CBOpCode::SET_1_L => write!(f, "SET 1,L"),
            CBOpCode::SET_1_pHL => write!(f, "SET 1,(pHL)"),
            CBOpCode::SET_1_A => write!(f, "SET 1,A"),
            CBOpCode::SET_2_B => write!(f, "SET 2,B"),
            CBOpCode::SET_2_C => write!(f, "SET 2,C"),
            CBOpCode::SET_2_D => write!(f, "SET 2,D"),
            CBOpCode::SET_2_E => write!(f, "SET 2,E"),
            CBOpCode::SET_2_H => write!(f, "SET 2,H"),
            CBOpCode::SET_2_L => write!(f, "SET 2,L"),
            CBOpCode::SET_2_pHL => write!(f, "SET 2,(pHL)"),
            CBOpCode::SET_2_A => write!(f, "SET 2,A"),
            CBOpCode::SET_3_B => write!(f, "SET 3,B"),
            CBOpCode::SET_3_C => write!(f, "SET 3,C"),
            CBOpCode::SET_3_D => write!(f, "SET 3,D"),
            CBOpCode::SET_3_E => write!(f, "SET 3,E"),
            CBOpCode::SET_3_H => write!(f, "SET 3,H"),
            CBOpCode::SET_3_L => write!(f, "SET 3,L"),
            CBOpCode::SET_3_pHL => write!(f, "SET 3,(pHL)"),
            CBOpCode::SET_3_A => write!(f, "SET 3,A"),
            CBOpCode::SET_4_B => write!(f, "SET 4,B"),
            CBOpCode::SET_4_C => write!(f, "SET 4,C"),
            CBOpCode::SET_4_D => write!(f, "SET 4,D"),
            CBOpCode::SET_4_E => write!(f, "SET 4,E"),
            CBOpCode::SET_4_H => write!(f, "SET 4,H"),
            CBOpCode::SET_4_L => write!(f, "SET 4,L"),
            CBOpCode::SET_4_pHL => write!(f, "SET 4,(pHL)"),
            CBOpCode::SET_4_A => write!(f, "SET 4,A"),
            CBOpCode::SET_5_B => write!(f, "SET 5,B"),
            CBOpCode::SET_5_C => write!(f, "SET 5,C"),
            CBOpCode::SET_5_D => write!(f, "SET 5,D"),
            CBOpCode::SET_5_E => write!(f, "SET 5,E"),
            CBOpCode::SET_5_H => write!(f, "SET 5,H"),
            CBOpCode::SET_5_L => write!(f, "SET 5,L"),
            CBOpCode::SET_5_pHL => write!(f, "SET 5,(pHL)"),
            CBOpCode::SET_5_A => write!(f, "SET 5,A"),
            CBOpCode::SET_6_B => write!(f, "SET 6,B"),
            CBOpCode::SET_6_C => write!(f, "SET 6,C"),
            CBOpCode::SET_6_D => write!(f, "SET 6,D"),
            CBOpCode::SET_6_E => write!(f, "SET 6,E"),
            CBOpCode::SET_6_H => write!(f, "SET 6,H"),
            CBOpCode::SET_6_L => write!(f, "SET 6,L"),
            CBOpCode::SET_6_pHL => write!(f, "SET 6,(pHL)"),
            CBOpCode::SET_6_A => write!(f, "SET 6,A"),
            CBOpCode::SET_7_B => write!(f, "SET 7,B"),
            CBOpCode::SET_7_C => write!(f, "SET 7,C"),
            CBOpCode::SET_7_D => write!(f, "SET 7,D"),
            CBOpCode::SET_7_E => write!(f, "SET 7,E"),
            CBOpCode::SET_7_H => write!(f, "SET 7,H"),
            CBOpCode::SET_7_L => write!(f, "SET 7,L"),
            CBOpCode::SET_7_pHL => write!(f, "SET 7,(pHL)"),
            CBOpCode::SET_7_A => write!(f, "SET 7,A"),
        }
    }
}
