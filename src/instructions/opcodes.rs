use super::arguments::*;

#[allow(non_camel_case_types)]
pub enum Instruction {
    Unknown,

    NOP,
    LD_BC_d16(d16),
    LD_pBC_A,
    INC_BC,
    INC_B,
    DEC_B,
    LD_B_d8(d8),
    RLCA,
    LD_pa16_SP(a16),
    ADD_HL_BC,
    LD_A_pBC,
    DEC_BC,
    INC_C,
    DEC_C,
    LD_C_d8(d8),
    RRCA,
    STOP_0,
    LD_DE_d16(d16),
    LD_pDE_A,
    INC_DE,
    INC_D,
    DEC_D,
    LD_D_d8(d8),
    RLA,
    JR_r8(r8),
    ADD_HL_DE,
    LD_A_pDE,
    DEC_DE,
    INC_E,
    DEC_E,
    LD_E_d8(d8),
    RRA,
    JR_NZ_r8(r8),
    LD_HL_d16(d16),
    LD_pHLp_A,
    INC_HL,
    INC_H,
    DEC_H,
    LD_H_d8(d8),
    DAA,
    JR_Z_r8(r8),
    ADD_HL_HL,
    LD_A_pHLp,
    DEC_HL,
    INC_L,
    DEC_L,
    LD_L_d8(d8),
    CPL,
    JR_NC_r8(r8),
    LD_SP_d16(d16),
    LD_pHLm_A,
    INC_SP,
    INC_pHL,
    DEC_pHL,
    LD_pHL_d8(d8),
    SCF,
    JR_C_r8(r8),
    ADD_HL_SP,
    LD_A_pHLm,
    DEC_SP,
    INC_A,
    DEC_A,
    LD_A_d8(d8),
    CCF,
    LD_B_B,
    LD_B_C,
    LD_B_D,
    LD_B_E,
    LD_B_H,
    LD_B_L,
    LD_B_pHL,
    LD_B_A,
    LD_C_B,
    LD_C_C,
    LD_C_D,
    LD_C_E,
    LD_C_H,
    LD_C_L,
    LD_C_pHL,
    LD_C_A,
    LD_D_B,
    LD_D_C,
    LD_D_D,
    LD_D_E,
    LD_D_H,
    LD_D_L,
    LD_D_pHL,
    LD_D_A,
    LD_E_B,
    LD_E_C,
    LD_E_D,
    LD_E_E,
    LD_E_H,
    LD_E_L,
    LD_E_pHL,
    LD_E_A,
    LD_H_B,
    LD_H_C,
    LD_H_D,
    LD_H_E,
    LD_H_H,
    LD_H_L,
    LD_H_pHL,
    LD_H_A,
    LD_L_B,
    LD_L_C,
    LD_L_D,
    LD_L_E,
    LD_L_H,
    LD_L_L,
    LD_L_pHL,
    LD_L_A,
    LD_pHL_B,
    LD_pHL_C,
    LD_pHL_D,
    LD_pHL_E,
    LD_pHL_H,
    LD_pHL_L,
    HALT,
    LD_pHL_A,
    LD_A_B,
    LD_A_C,
    LD_A_D,
    LD_A_E,
    LD_A_H,
    LD_A_L,
    LD_A_pHL,
    LD_A_A,
    ADD_A_B,
    ADD_A_C,
    ADD_A_D,
    ADD_A_E,
    ADD_A_H,
    ADD_A_L,
    ADD_A_pHL,
    ADD_A_A,
    ADC_A_B,
    ADC_A_C,
    ADC_A_D,
    ADC_A_E,
    ADC_A_H,
    ADC_A_L,
    ADC_A_pHL,
    ADC_A_A,
    SUB_B,
    SUB_C,
    SUB_D,
    SUB_E,
    SUB_H,
    SUB_L,
    SUB_pHL,
    SUB_A,
    SBC_A_B,
    SBC_A_C,
    SBC_A_D,
    SBC_A_E,
    SBC_A_H,
    SBC_A_L,
    SBC_A_pHL,
    SBC_A_A,
    AND_B,
    AND_C,
    AND_D,
    AND_E,
    AND_H,
    AND_L,
    AND_pHL,
    AND_A,
    XOR_B,
    XOR_C,
    XOR_D,
    XOR_E,
    XOR_H,
    XOR_L,
    XOR_pHL,
    XOR_A,
    OR_B,
    OR_C,
    OR_D,
    OR_E,
    OR_H,
    OR_L,
    OR_pHL,
    OR_A,
    CP_B,
    CP_C,
    CP_D,
    CP_E,
    CP_H,
    CP_L,
    CP_pHL,
    CP_A,
    RET_NZ,
    POP_BC,
    JP_NZ_a16(a16),
    JP_a16(a16),
    CALL_NZ_a16(a16),
    PUSH_BC,
    ADD_A_d8(d8),
    RST_00H,
    RET_Z,
    RET,
    JP_Z_a16(a16),
    PREFIX_CB,
    CALL_Z_a16(a16),
    CALL_a16(a16),
    ADC_A_d8(d8),
    RST_08H,
    RET_NC,
    POP_DE,
    JP_NC_a16(a16),
    CALL_NC_a16(a16),
    PUSH_DE,
    SUB_d8(d8),
    RST_10H,
    RET_C,
    RETI,
    JP_C_a16(a16),
    CALL_C_a16(a16),
    SBC_A_d8(d8),
    RST_18H,
    LDH_pa8_A(a8),
    POP_HL,
    LD_pC_A,
    PUSH_HL,
    AND_d8(d8),
    RST_20H,
    ADD_SP_r8(r8),
    JP_pHL,
    LD_pa16_A(a16),
    XOR_d8(d8),
    RST_28H,
    LDH_A_pa8(a8),
    POP_AF,
    LD_A_pC,
    DI,
    PUSH_AF,
    OR_d8(d8),
    RST_30H,
    LD_HL_SPp_r8(r8),
    LD_SP_HL,
    LD_A_pa16(a16),
    EI,
    CP_d8(d8),
    RST_38H
}
