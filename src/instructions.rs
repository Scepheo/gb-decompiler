use std::fmt;

#[allow(non_camel_case_types)]
#[derive(Clone, Copy)]
pub struct d8 {
    value: u8
}

impl d8 {
    fn at(data: &Box<[u8]>, address: usize) -> d8 {
        d8 { value: data[address] }
    }
}

impl fmt::Display for d8 {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{0:02X}", self.value)
    }
}

#[allow(non_camel_case_types)]
#[derive(Clone, Copy)]
pub struct d16 {
    value: u16
}

impl d16 {
    fn at(data: &Box<[u8]>, address: usize) -> d16 {
        let low = data[address] as u16;
        let high = data[address + 1] as u16;
        d16 { value: low | (high << 8) }
    }
}

impl fmt::Display for d16 {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{0:04X}", self.value)
    }
}

#[allow(non_camel_case_types)]
#[derive(Clone, Copy)]
pub struct a8 {
    value: u8
}

impl a8 {
    fn at(data: &Box<[u8]>, address: usize) -> a8 {
        a8 { value: data[address] }
    }
}

impl fmt::Display for a8 {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "${0:02X}", self.value)
    }
}

#[allow(non_camel_case_types)]
#[derive(Clone, Copy)]
pub struct a16 {
    value: u16
}

impl a16 {
    fn at(data: &Box<[u8]>, address: usize) -> a16 {
        let low = data[address] as u16;
        let high = data[address + 1] as u16;
        a16 { value: low | (high << 8) }
    }
}

impl fmt::Display for a16 {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "${0:04X}", self.value)
    }
}

#[allow(non_camel_case_types)]
#[derive(Clone, Copy)]
pub struct r8 {
    value: i8
}

impl r8 {
    fn at(data: &Box<[u8]>, address: usize) -> r8 {
        r8 { value: data[address] as i8 }
    }
}

impl fmt::Display for r8 {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{0:+02X}", self.value)
    }
}

#[allow(non_camel_case_types)]
pub enum Instruction {
    Unknown,

    NOP,
    LD_BC_d16(d16),
    LD_pBC_A,
    INC_BC,
    INC_B,
    DEC_B,
    LD_B_d8(d8),
    RLCA,
    LD_pa16_SP(a16),
    ADD_HL_BC,
    LD_A_pBC,
    DEC_BC,
    INC_C,
    DEC_C,
    LD_C_d8(d8),
    RRCA,
    STOP_0,
    LD_DE_d16(d16),
    LD_pDE_A,
    INC_DE,
    INC_D,
    DEC_D,
    LD_D_d8(d8),
    RLA,
    JR_r8(r8),
    ADD_HL_DE,
    LD_A_pDE,
    DEC_DE,
    INC_E,
    DEC_E,
    LD_E_d8(d8),
    RRA,
    JR_NZ_r8(r8),
    LD_HL_d16(d16),
    LD_pHLp_A,
    INC_HL,
    INC_H,
    DEC_H,
    LD_H_d8(d8),
    DAA,
    JR_Z_r8(r8),
    ADD_HL_HL,
    LD_A_pHLp,
    DEC_HL,
    INC_L,
    DEC_L,
    LD_L_d8(d8),
    CPL,
    JR_NC_r8(r8),
    LD_SP_d16(d16),
    LD_pHLm_A,
    INC_SP,
    INC_pHL,
    DEC_pHL,
    LD_pHL_d8(d8),
    SCF,
    JR_C_r8(r8),
    ADD_HL_SP,
    LD_A_pHLm,
    DEC_SP,
    INC_A,
    DEC_A,
    LD_A_d8(d8),
    CCF,
    LD_B_B,
    LD_B_C,
    LD_B_D,
    LD_B_E,
    LD_B_H,
    LD_B_L,
    LD_B_pHL,
    LD_B_A,
    LD_C_B,
    LD_C_C,
    LD_C_D,
    LD_C_E,
    LD_C_H,
    LD_C_L,
    LD_C_pHL,
    LD_C_A,
    LD_D_B,
    LD_D_C,
    LD_D_D,
    LD_D_E,
    LD_D_H,
    LD_D_L,
    LD_D_pHL,
    LD_D_A,
    LD_E_B,
    LD_E_C,
    LD_E_D,
    LD_E_E,
    LD_E_H,
    LD_E_L,
    LD_E_pHL,
    LD_E_A,
    LD_H_B,
    LD_H_C,
    LD_H_D,
    LD_H_E,
    LD_H_H,
    LD_H_L,
    LD_H_pHL,
    LD_H_A,
    LD_L_B,
    LD_L_C,
    LD_L_D,
    LD_L_E,
    LD_L_H,
    LD_L_L,
    LD_L_pHL,
    LD_L_A,
    LD_pHL_B,
    LD_pHL_C,
    LD_pHL_D,
    LD_pHL_E,
    LD_pHL_H,
    LD_pHL_L,
    HALT,
    LD_pHL_A,
    LD_A_B,
    LD_A_C,
    LD_A_D,
    LD_A_E,
    LD_A_H,
    LD_A_L,
    LD_A_pHL,
    LD_A_A,
    ADD_A_B,
    ADD_A_C,
    ADD_A_D,
    ADD_A_E,
    ADD_A_H,
    ADD_A_L,
    ADD_A_pHL,
    ADD_A_A,
    ADC_A_B,
    ADC_A_C,
    ADC_A_D,
    ADC_A_E,
    ADC_A_H,
    ADC_A_L,
    ADC_A_pHL,
    ADC_A_A,
    SUB_B,
    SUB_C,
    SUB_D,
    SUB_E,
    SUB_H,
    SUB_L,
    SUB_pHL,
    SUB_A,
    SBC_A_B,
    SBC_A_C,
    SBC_A_D,
    SBC_A_E,
    SBC_A_H,
    SBC_A_L,
    SBC_A_pHL,
    SBC_A_A,
    AND_B,
    AND_C,
    AND_D,
    AND_E,
    AND_H,
    AND_L,
    AND_pHL,
    AND_A,
    XOR_B,
    XOR_C,
    XOR_D,
    XOR_E,
    XOR_H,
    XOR_L,
    XOR_pHL,
    XOR_A,
    OR_B,
    OR_C,
    OR_D,
    OR_E,
    OR_H,
    OR_L,
    OR_pHL,
    OR_A,
    CP_B,
    CP_C,
    CP_D,
    CP_E,
    CP_H,
    CP_L,
    CP_pHL,
    CP_A,
    RET_NZ,
    POP_BC,
    JP_NZ_a16(a16),
    JP_a16(a16),
    CALL_NZ_a16(a16),
    PUSH_BC,
    ADD_A_d8(d8),
    RST_00H,
    RET_Z,
    RET,
    JP_Z_a16(a16),
    PREFIX_CB,
    CALL_Z_a16(a16),
    CALL_a16(a16),
    ADC_A_d8(d8),
    RST_08H,
    RET_NC,
    POP_DE,
    JP_NC_a16(a16),
    CALL_NC_a16(a16),
    PUSH_DE,
    SUB_d8(d8),
    RST_10H,
    RET_C,
    RETI,
    JP_C_a16(a16),
    CALL_C_a16(a16),
    SBC_A_d8(d8),
    RST_18H,
    LDH_pa8_A(a8),
    POP_HL,
    LD_pC_A,
    PUSH_HL,
    AND_d8(d8),
    RST_20H,
    ADD_SP_r8(r8),
    JP_pHL,
    LD_pa16_A(a16),
    XOR_d8(d8),
    RST_28H,
    LDH_A_pa8(a8),
    POP_AF,
    LD_A_pC,
    DI,
    PUSH_AF,
    OR_d8(d8),
    RST_30H,
    LD_HL_SPp_r8(r8),
    LD_SP_HL,
    LD_A_pa16(a16),
    EI,
    CP_d8(d8),
    RST_38H
}

impl fmt::Display for Instruction {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            Instruction::NOP => write!(f, "NOP"),
            Instruction::LD_BC_d16(value) => write!(f, "LD BC,{}", value),
            Instruction::LD_pBC_A => write!(f, "LD (BC),A"),
            Instruction::INC_BC => write!(f, "INC BC"),
            Instruction::INC_B => write!(f, "INC B"),
            Instruction::DEC_B => write!(f, "DEC B"),
            Instruction::LD_B_d8(value) => write!(f, "LD B,{}", value),
            Instruction::RLCA => write!(f, "RLCA"),
            Instruction::LD_pa16_SP(value) => write!(f, "LD ({}),SP", value),
            Instruction::ADD_HL_BC => write!(f, "ADD HL,BC"),
            Instruction::LD_A_pBC => write!(f, "LD A,(BC)"),
            Instruction::DEC_BC => write!(f, "DEC BC"),
            Instruction::INC_C => write!(f, "INC C"),
            Instruction::DEC_C => write!(f, "DEC C"),
            Instruction::LD_C_d8(value) => write!(f, "LD C,{}", value),
            Instruction::RRCA => write!(f, "RRCA"),
            Instruction::STOP_0 => write!(f, "STOP 0"),
            Instruction::LD_DE_d16(value) => write!(f, "LD DE,{}", value),
            Instruction::LD_pDE_A => write!(f, "LD (DE),A"),
            Instruction::INC_DE => write!(f, "INC DE"),
            Instruction::INC_D => write!(f, "INC D"),
            Instruction::DEC_D => write!(f, "DEC D"),
            Instruction::LD_D_d8(value) => write!(f, "LD D,{}", value),
            Instruction::RLA => write!(f, "RLA"),
            Instruction::JR_r8(value) => write!(f, "JR {}", value),
            Instruction::ADD_HL_DE => write!(f, "ADD HL,DE"),
            Instruction::LD_A_pDE => write!(f, "LD A,(DE)"),
            Instruction::DEC_DE => write!(f, "DEC DE"),
            Instruction::INC_E => write!(f, "INC E"),
            Instruction::DEC_E => write!(f, "DEC E"),
            Instruction::LD_E_d8(value) => write!(f, "LD E,{}", value),
            Instruction::RRA => write!(f, "RRA"),
            Instruction::JR_NZ_r8(value) => write!(f, "JR NZ,{}", value),
            Instruction::LD_HL_d16(value) => write!(f, "LD HL,{}", value),
            Instruction::LD_pHLp_A => write!(f, "LD (HL+),A"),
            Instruction::INC_HL => write!(f, "INC HL"),
            Instruction::INC_H => write!(f, "INC H"),
            Instruction::DEC_H => write!(f, "DEC H"),
            Instruction::LD_H_d8(value) => write!(f, "LD H,{}", value),
            Instruction::DAA => write!(f, "DAA"),
            Instruction::JR_Z_r8(value) => write!(f, "JR Z,{}", value),
            Instruction::ADD_HL_HL => write!(f, "ADD HL,HL"),
            Instruction::LD_A_pHLp => write!(f, "LD A,(HL+)"),
            Instruction::DEC_HL => write!(f, "DEC HL"),
            Instruction::INC_L => write!(f, "INC L"),
            Instruction::DEC_L => write!(f, "DEC L"),
            Instruction::LD_L_d8(value) => write!(f, "LD L,{}", value),
            Instruction::CPL => write!(f, "CPL"),
            Instruction::JR_NC_r8(value) => write!(f, "JR NC,{}", value),
            Instruction::LD_SP_d16(value) => write!(f, "LD SP,{}", value),
            Instruction::LD_pHLm_A => write!(f, "LD (HL-),A"),
            Instruction::INC_SP => write!(f, "INC SP"),
            Instruction::INC_pHL => write!(f, "INC (HL)"),
            Instruction::DEC_pHL => write!(f, "DEC (HL)"),
            Instruction::LD_pHL_d8(value) => write!(f, "LD (HL),{}", value),
            Instruction::SCF => write!(f, "SCF"),
            Instruction::JR_C_r8(value) => write!(f, "JR C,{}", value),
            Instruction::ADD_HL_SP => write!(f, "ADD HL,SP"),
            Instruction::LD_A_pHLm => write!(f, "LD A,(HL-)"),
            Instruction::DEC_SP => write!(f, "DEC SP"),
            Instruction::INC_A => write!(f, "INC A"),
            Instruction::DEC_A => write!(f, "DEC A"),
            Instruction::LD_A_d8(value) => write!(f, "LD A,{}", value),
            Instruction::CCF => write!(f, "CCF"),
            Instruction::LD_B_B => write!(f, "LD B,B"),
            Instruction::LD_B_C => write!(f, "LD B,C"),
            Instruction::LD_B_D => write!(f, "LD B,D"),
            Instruction::LD_B_E => write!(f, "LD B,E"),
            Instruction::LD_B_H => write!(f, "LD B,H"),
            Instruction::LD_B_L => write!(f, "LD B,L"),
            Instruction::LD_B_pHL => write!(f, "LD B,(HL)"),
            Instruction::LD_B_A => write!(f, "LD B,A"),
            Instruction::LD_C_B => write!(f, "LD C,B"),
            Instruction::LD_C_C => write!(f, "LD C,C"),
            Instruction::LD_C_D => write!(f, "LD C,D"),
            Instruction::LD_C_E => write!(f, "LD C,E"),
            Instruction::LD_C_H => write!(f, "LD C,H"),
            Instruction::LD_C_L => write!(f, "LD C,L"),
            Instruction::LD_C_pHL => write!(f, "LD C,(HL)"),
            Instruction::LD_C_A => write!(f, "LD C,A"),
            Instruction::LD_D_B => write!(f, "LD D,B"),
            Instruction::LD_D_C => write!(f, "LD D,C"),
            Instruction::LD_D_D => write!(f, "LD D,D"),
            Instruction::LD_D_E => write!(f, "LD D,E"),
            Instruction::LD_D_H => write!(f, "LD D,H"),
            Instruction::LD_D_L => write!(f, "LD D,L"),
            Instruction::LD_D_pHL => write!(f, "LD D,(HL)"),
            Instruction::LD_D_A => write!(f, "LD D,A"),
            Instruction::LD_E_B => write!(f, "LD E,B"),
            Instruction::LD_E_C => write!(f, "LD E,C"),
            Instruction::LD_E_D => write!(f, "LD E,D"),
            Instruction::LD_E_E => write!(f, "LD E,E"),
            Instruction::LD_E_H => write!(f, "LD E,H"),
            Instruction::LD_E_L => write!(f, "LD E,L"),
            Instruction::LD_E_pHL => write!(f, "LD E,(HL)"),
            Instruction::LD_E_A => write!(f, "LD E,A"),
            Instruction::LD_H_B => write!(f, "LD H,B"),
            Instruction::LD_H_C => write!(f, "LD H,C"),
            Instruction::LD_H_D => write!(f, "LD H,D"),
            Instruction::LD_H_E => write!(f, "LD H,E"),
            Instruction::LD_H_H => write!(f, "LD H,H"),
            Instruction::LD_H_L => write!(f, "LD H,L"),
            Instruction::LD_H_pHL => write!(f, "LD H,(HL)"),
            Instruction::LD_H_A => write!(f, "LD H,A"),
            Instruction::LD_L_B => write!(f, "LD L,B"),
            Instruction::LD_L_C => write!(f, "LD L,C"),
            Instruction::LD_L_D => write!(f, "LD L,D"),
            Instruction::LD_L_E => write!(f, "LD L,E"),
            Instruction::LD_L_H => write!(f, "LD L,H"),
            Instruction::LD_L_L => write!(f, "LD L,L"),
            Instruction::LD_L_pHL => write!(f, "LD L,(HL)"),
            Instruction::LD_L_A => write!(f, "LD L,A"),
            Instruction::LD_pHL_B => write!(f, "LD (HL),B"),
            Instruction::LD_pHL_C => write!(f, "LD (HL),C"),
            Instruction::LD_pHL_D => write!(f, "LD (HL),D"),
            Instruction::LD_pHL_E => write!(f, "LD (HL),E"),
            Instruction::LD_pHL_H => write!(f, "LD (HL),H"),
            Instruction::LD_pHL_L => write!(f, "LD (HL),L"),
            Instruction::HALT => write!(f, "HALT"),
            Instruction::LD_pHL_A => write!(f, "LD (HL),A"),
            Instruction::LD_A_B => write!(f, "LD A,B"),
            Instruction::LD_A_C => write!(f, "LD A,C"),
            Instruction::LD_A_D => write!(f, "LD A,D"),
            Instruction::LD_A_E => write!(f, "LD A,E"),
            Instruction::LD_A_H => write!(f, "LD A,H"),
            Instruction::LD_A_L => write!(f, "LD A,L"),
            Instruction::LD_A_pHL => write!(f, "LD A,(HL)"),
            Instruction::LD_A_A => write!(f, "LD A,A"),
            Instruction::ADD_A_B => write!(f, "ADD A,B"),
            Instruction::ADD_A_C => write!(f, "ADD A,C"),
            Instruction::ADD_A_D => write!(f, "ADD A,D"),
            Instruction::ADD_A_E => write!(f, "ADD A,E"),
            Instruction::ADD_A_H => write!(f, "ADD A,H"),
            Instruction::ADD_A_L => write!(f, "ADD A,L"),
            Instruction::ADD_A_pHL => write!(f, "ADD A,(HL)"),
            Instruction::ADD_A_A => write!(f, "ADD A,A"),
            Instruction::ADC_A_B => write!(f, "ADC A,B"),
            Instruction::ADC_A_C => write!(f, "ADC A,C"),
            Instruction::ADC_A_D => write!(f, "ADC A,D"),
            Instruction::ADC_A_E => write!(f, "ADC A,E"),
            Instruction::ADC_A_H => write!(f, "ADC A,H"),
            Instruction::ADC_A_L => write!(f, "ADC A,L"),
            Instruction::ADC_A_pHL => write!(f, "ADC A,(HL)"),
            Instruction::ADC_A_A => write!(f, "ADC A,A"),
            Instruction::SUB_B => write!(f, "SUB B"),
            Instruction::SUB_C => write!(f, "SUB C"),
            Instruction::SUB_D => write!(f, "SUB D"),
            Instruction::SUB_E => write!(f, "SUB E"),
            Instruction::SUB_H => write!(f, "SUB H"),
            Instruction::SUB_L => write!(f, "SUB L"),
            Instruction::SUB_pHL => write!(f, "SUB (HL)"),
            Instruction::SUB_A => write!(f, "SUB A"),
            Instruction::SBC_A_B => write!(f, "SBC A,B"),
            Instruction::SBC_A_C => write!(f, "SBC A,C"),
            Instruction::SBC_A_D => write!(f, "SBC A,D"),
            Instruction::SBC_A_E => write!(f, "SBC A,E"),
            Instruction::SBC_A_H => write!(f, "SBC A,H"),
            Instruction::SBC_A_L => write!(f, "SBC A,L"),
            Instruction::SBC_A_pHL => write!(f, "SBC A,(HL)"),
            Instruction::SBC_A_A => write!(f, "SBC A,A"),
            Instruction::AND_B => write!(f, "AND B"),
            Instruction::AND_C => write!(f, "AND C"),
            Instruction::AND_D => write!(f, "AND D"),
            Instruction::AND_E => write!(f, "AND E"),
            Instruction::AND_H => write!(f, "AND H"),
            Instruction::AND_L => write!(f, "AND L"),
            Instruction::AND_pHL => write!(f, "AND (HL)"),
            Instruction::AND_A => write!(f, "AND A"),
            Instruction::XOR_B => write!(f, "XOR B"),
            Instruction::XOR_C => write!(f, "XOR C"),
            Instruction::XOR_D => write!(f, "XOR D"),
            Instruction::XOR_E => write!(f, "XOR E"),
            Instruction::XOR_H => write!(f, "XOR H"),
            Instruction::XOR_L => write!(f, "XOR L"),
            Instruction::XOR_pHL => write!(f, "XOR (HL)"),
            Instruction::XOR_A => write!(f, "XOR A"),
            Instruction::OR_B => write!(f, "OR B"),
            Instruction::OR_C => write!(f, "OR C"),
            Instruction::OR_D => write!(f, "OR D"),
            Instruction::OR_E => write!(f, "OR E"),
            Instruction::OR_H => write!(f, "OR H"),
            Instruction::OR_L => write!(f, "OR L"),
            Instruction::OR_pHL => write!(f, "OR (HL)"),
            Instruction::OR_A => write!(f, "OR A"),
            Instruction::CP_B => write!(f, "CP B"),
            Instruction::CP_C => write!(f, "CP C"),
            Instruction::CP_D => write!(f, "CP D"),
            Instruction::CP_E => write!(f, "CP E"),
            Instruction::CP_H => write!(f, "CP H"),
            Instruction::CP_L => write!(f, "CP L"),
            Instruction::CP_pHL => write!(f, "CP (HL)"),
            Instruction::CP_A => write!(f, "CP A"),
            Instruction::RET_NZ => write!(f, "RET NZ"),
            Instruction::POP_BC => write!(f, "POP BC"),
            Instruction::JP_NZ_a16(value) => write!(f, "JP NZ,{}", value),
            Instruction::JP_a16(value) => write!(f, "JP {}", value),
            Instruction::CALL_NZ_a16(value) => write!(f, "CALL NZ,{}", value),
            Instruction::PUSH_BC => write!(f, "PUSH BC"),
            Instruction::ADD_A_d8(value) => write!(f, "ADD A,{}", value),
            Instruction::RST_00H => write!(f, "RST 00H"),
            Instruction::RET_Z => write!(f, "RET Z"),
            Instruction::RET => write!(f, "RET"),
            Instruction::JP_Z_a16(value) => write!(f, "JP Z,{}", value),
            Instruction::PREFIX_CB => write!(f, "PREFIX CB"),
            Instruction::CALL_Z_a16(value) => write!(f, "CALL Z,{}", value),
            Instruction::CALL_a16(value) => write!(f, "CALL {}", value),
            Instruction::ADC_A_d8(value) => write!(f, "ADC A,{}", value),
            Instruction::RST_08H => write!(f, "RST 08H"),
            Instruction::RET_NC => write!(f, "RET NC"),
            Instruction::POP_DE => write!(f, "POP DE"),
            Instruction::JP_NC_a16(value) => write!(f, "JP NC,{}", value),
            Instruction::CALL_NC_a16(value) => write!(f, "CALL NC,{}", value),
            Instruction::PUSH_DE => write!(f, "PUSH DE"),
            Instruction::SUB_d8(value) => write!(f, "SUB {}", value),
            Instruction::RST_10H => write!(f, "RST 10H"),
            Instruction::RET_C => write!(f, "RET C"),
            Instruction::RETI => write!(f, "RETI"),
            Instruction::JP_C_a16(value) => write!(f, "JP C,{}", value),
            Instruction::CALL_C_a16(value) => write!(f, "CALL C,{}", value),
            Instruction::SBC_A_d8(value) => write!(f, "SBC A,{}", value),
            Instruction::RST_18H => write!(f, "RST 18H"),
            Instruction::LDH_pa8_A(value) => write!(f, "LDH ({}),A", value),
            Instruction::POP_HL => write!(f, "POP HL"),
            Instruction::LD_pC_A => write!(f, "LD (C),A"),
            Instruction::PUSH_HL => write!(f, "PUSH HL"),
            Instruction::AND_d8(value) => write!(f, "AND {}", value),
            Instruction::RST_20H => write!(f, "RST 20H"),
            Instruction::ADD_SP_r8(value) => write!(f, "ADD SP,{}", value),
            Instruction::JP_pHL => write!(f, "JP (HL)"),
            Instruction::LD_pa16_A(value) => write!(f, "LD ({}),A", value),
            Instruction::XOR_d8(value) => write!(f, "XOR {}", value),
            Instruction::RST_28H => write!(f, "RST 28H"),
            Instruction::LDH_A_pa8(value) => write!(f, "LDH A,({})", value),
            Instruction::POP_AF => write!(f, "POP AF"),
            Instruction::LD_A_pC => write!(f, "LD A,(C)"),
            Instruction::DI => write!(f, "DI"),
            Instruction::PUSH_AF => write!(f, "PUSH AF"),
            Instruction::OR_d8(value) => write!(f, "OR {}", value),
            Instruction::RST_30H => write!(f, "RST 30H"),
            Instruction::LD_HL_SPp_r8(value) => write!(f, "LD HL,SP+{}", value),
            Instruction::LD_SP_HL => write!(f, "LD SP,HL"),
            Instruction::LD_A_pa16(value) => write!(f, "LD A,({})", value),
            Instruction::EI => write!(f, "EI"),
            Instruction::CP_d8(value) => write!(f, "CP {}", value),
            Instruction::RST_38H => write!(f, "RST 38H"),
            _ => write!(f, "UNKNOWN")
        }
    }
}

impl Instruction {
    pub fn size(&self) -> usize {
        match *self {
            Instruction::NOP => 1,
            Instruction::LD_BC_d16(_) => 3,
            Instruction::LD_pBC_A => 1,
            Instruction::INC_BC => 1,
            Instruction::INC_B => 1,
            Instruction::DEC_B => 1,
            Instruction::LD_B_d8(_) => 2,
            Instruction::RLCA => 1,
            Instruction::LD_pa16_SP(_) => 3,
            Instruction::ADD_HL_BC => 1,
            Instruction::LD_A_pBC => 1,
            Instruction::DEC_BC => 1,
            Instruction::INC_C => 1,
            Instruction::DEC_C => 1,
            Instruction::LD_C_d8(_) => 2,
            Instruction::RRCA => 1,
            Instruction::STOP_0 => 1,
            Instruction::LD_DE_d16(_) => 3,
            Instruction::LD_pDE_A => 1,
            Instruction::INC_DE => 1,
            Instruction::INC_D => 1,
            Instruction::DEC_D => 1,
            Instruction::LD_D_d8(_) => 2,
            Instruction::RLA => 1,
            Instruction::JR_r8(_) => 2,
            Instruction::ADD_HL_DE => 1,
            Instruction::LD_A_pDE => 1,
            Instruction::DEC_DE => 1,
            Instruction::INC_E => 1,
            Instruction::DEC_E => 1,
            Instruction::LD_E_d8(_) => 2,
            Instruction::RRA => 1,
            Instruction::JR_NZ_r8(_) => 2,
            Instruction::LD_HL_d16(_) => 3,
            Instruction::LD_pHLp_A => 1,
            Instruction::INC_HL => 1,
            Instruction::INC_H => 1,
            Instruction::DEC_H => 1,
            Instruction::LD_H_d8(_) => 2,
            Instruction::DAA => 1,
            Instruction::JR_Z_r8(_) => 2,
            Instruction::ADD_HL_HL => 1,
            Instruction::LD_A_pHLp => 1,
            Instruction::DEC_HL => 1,
            Instruction::INC_L => 1,
            Instruction::DEC_L => 1,
            Instruction::LD_L_d8(_) => 2,
            Instruction::CPL => 1,
            Instruction::JR_NC_r8(_) => 2,
            Instruction::LD_SP_d16(_) => 3,
            Instruction::LD_pHLm_A => 1,
            Instruction::INC_SP => 1,
            Instruction::INC_pHL => 1,
            Instruction::DEC_pHL => 1,
            Instruction::LD_pHL_d8(_) => 2,
            Instruction::SCF => 1,
            Instruction::JR_C_r8(_) => 2,
            Instruction::ADD_HL_SP => 1,
            Instruction::LD_A_pHLm => 1,
            Instruction::DEC_SP => 1,
            Instruction::INC_A => 1,
            Instruction::DEC_A => 1,
            Instruction::LD_A_d8(_) => 2,
            Instruction::CCF => 1,
            Instruction::LD_B_B => 1,
            Instruction::LD_B_C => 1,
            Instruction::LD_B_D => 1,
            Instruction::LD_B_E => 1,
            Instruction::LD_B_H => 1,
            Instruction::LD_B_L => 1,
            Instruction::LD_B_pHL => 1,
            Instruction::LD_B_A => 1,
            Instruction::LD_C_B => 1,
            Instruction::LD_C_C => 1,
            Instruction::LD_C_D => 1,
            Instruction::LD_C_E => 1,
            Instruction::LD_C_H => 1,
            Instruction::LD_C_L => 1,
            Instruction::LD_C_pHL => 1,
            Instruction::LD_C_A => 1,
            Instruction::LD_D_B => 1,
            Instruction::LD_D_C => 1,
            Instruction::LD_D_D => 1,
            Instruction::LD_D_E => 1,
            Instruction::LD_D_H => 1,
            Instruction::LD_D_L => 1,
            Instruction::LD_D_pHL => 1,
            Instruction::LD_D_A => 1,
            Instruction::LD_E_B => 1,
            Instruction::LD_E_C => 1,
            Instruction::LD_E_D => 1,
            Instruction::LD_E_E => 1,
            Instruction::LD_E_H => 1,
            Instruction::LD_E_L => 1,
            Instruction::LD_E_pHL => 1,
            Instruction::LD_E_A => 1,
            Instruction::LD_H_B => 1,
            Instruction::LD_H_C => 1,
            Instruction::LD_H_D => 1,
            Instruction::LD_H_E => 1,
            Instruction::LD_H_H => 1,
            Instruction::LD_H_L => 1,
            Instruction::LD_H_pHL => 1,
            Instruction::LD_H_A => 1,
            Instruction::LD_L_B => 1,
            Instruction::LD_L_C => 1,
            Instruction::LD_L_D => 1,
            Instruction::LD_L_E => 1,
            Instruction::LD_L_H => 1,
            Instruction::LD_L_L => 1,
            Instruction::LD_L_pHL => 1,
            Instruction::LD_L_A => 1,
            Instruction::LD_pHL_B => 1,
            Instruction::LD_pHL_C => 1,
            Instruction::LD_pHL_D => 1,
            Instruction::LD_pHL_E => 1,
            Instruction::LD_pHL_H => 1,
            Instruction::LD_pHL_L => 1,
            Instruction::HALT => 1,
            Instruction::LD_pHL_A => 1,
            Instruction::LD_A_B => 1,
            Instruction::LD_A_C => 1,
            Instruction::LD_A_D => 1,
            Instruction::LD_A_E => 1,
            Instruction::LD_A_H => 1,
            Instruction::LD_A_L => 1,
            Instruction::LD_A_pHL => 1,
            Instruction::LD_A_A => 1,
            Instruction::ADD_A_B => 1,
            Instruction::ADD_A_C => 1,
            Instruction::ADD_A_D => 1,
            Instruction::ADD_A_E => 1,
            Instruction::ADD_A_H => 1,
            Instruction::ADD_A_L => 1,
            Instruction::ADD_A_pHL => 1,
            Instruction::ADD_A_A => 1,
            Instruction::ADC_A_B => 1,
            Instruction::ADC_A_C => 1,
            Instruction::ADC_A_D => 1,
            Instruction::ADC_A_E => 1,
            Instruction::ADC_A_H => 1,
            Instruction::ADC_A_L => 1,
            Instruction::ADC_A_pHL => 1,
            Instruction::ADC_A_A => 1,
            Instruction::SUB_B => 1,
            Instruction::SUB_C => 1,
            Instruction::SUB_D => 1,
            Instruction::SUB_E => 1,
            Instruction::SUB_H => 1,
            Instruction::SUB_L => 1,
            Instruction::SUB_pHL => 1,
            Instruction::SUB_A => 1,
            Instruction::SBC_A_B => 1,
            Instruction::SBC_A_C => 1,
            Instruction::SBC_A_D => 1,
            Instruction::SBC_A_E => 1,
            Instruction::SBC_A_H => 1,
            Instruction::SBC_A_L => 1,
            Instruction::SBC_A_pHL => 1,
            Instruction::SBC_A_A => 1,
            Instruction::AND_B => 1,
            Instruction::AND_C => 1,
            Instruction::AND_D => 1,
            Instruction::AND_E => 1,
            Instruction::AND_H => 1,
            Instruction::AND_L => 1,
            Instruction::AND_pHL => 1,
            Instruction::AND_A => 1,
            Instruction::XOR_B => 1,
            Instruction::XOR_C => 1,
            Instruction::XOR_D => 1,
            Instruction::XOR_E => 1,
            Instruction::XOR_H => 1,
            Instruction::XOR_L => 1,
            Instruction::XOR_pHL => 1,
            Instruction::XOR_A => 1,
            Instruction::OR_B => 1,
            Instruction::OR_C => 1,
            Instruction::OR_D => 1,
            Instruction::OR_E => 1,
            Instruction::OR_H => 1,
            Instruction::OR_L => 1,
            Instruction::OR_pHL => 1,
            Instruction::OR_A => 1,
            Instruction::CP_B => 1,
            Instruction::CP_C => 1,
            Instruction::CP_D => 1,
            Instruction::CP_E => 1,
            Instruction::CP_H => 1,
            Instruction::CP_L => 1,
            Instruction::CP_pHL => 1,
            Instruction::CP_A => 1,
            Instruction::RET_NZ => 1,
            Instruction::POP_BC => 1,
            Instruction::JP_NZ_a16(_) => 3,
            Instruction::JP_a16(_) => 3,
            Instruction::CALL_NZ_a16(_) => 3,
            Instruction::PUSH_BC => 1,
            Instruction::ADD_A_d8(_) => 2,
            Instruction::RST_00H => 1,
            Instruction::RET_Z => 1,
            Instruction::RET => 1,
            Instruction::JP_Z_a16(_) => 3,
            Instruction::PREFIX_CB => 1,
            Instruction::CALL_Z_a16(_) => 3,
            Instruction::CALL_a16(_) => 3,
            Instruction::ADC_A_d8(_) => 2,
            Instruction::RST_08H => 1,
            Instruction::RET_NC => 1,
            Instruction::POP_DE => 1,
            Instruction::JP_NC_a16(_) => 3,
            Instruction::CALL_NC_a16(_) => 3,
            Instruction::PUSH_DE => 1,
            Instruction::SUB_d8(_) => 2,
            Instruction::RST_10H => 1,
            Instruction::RET_C => 1,
            Instruction::RETI => 1,
            Instruction::JP_C_a16(_) => 3,
            Instruction::CALL_C_a16(_) => 3,
            Instruction::SBC_A_d8(_) => 2,
            Instruction::RST_18H => 1,
            Instruction::LDH_pa8_A(_) => 2,
            Instruction::POP_HL => 1,
            Instruction::LD_pC_A => 1,
            Instruction::PUSH_HL => 1,
            Instruction::AND_d8(_) => 2,
            Instruction::RST_20H => 1,
            Instruction::ADD_SP_r8(_) => 2,
            Instruction::JP_pHL => 1,
            Instruction::LD_pa16_A(_) => 3,
            Instruction::XOR_d8(_) => 2,
            Instruction::RST_28H => 1,
            Instruction::LDH_A_pa8(_) => 2,
            Instruction::POP_AF => 1,
            Instruction::LD_A_pC => 1,
            Instruction::DI => 1,
            Instruction::PUSH_AF => 1,
            Instruction::OR_d8(_) => 2,
            Instruction::RST_30H => 1,
            Instruction::LD_HL_SPp_r8(_) => 2,
            Instruction::LD_SP_HL => 1,
            Instruction::LD_A_pa16(_) => 3,
            Instruction::EI => 1,
            Instruction::CP_d8(_) => 2,
            Instruction::RST_38H => 1,
            _ => 1
        }
    }

    pub fn decode_at(data: &Box<[u8]>, address: usize) -> Instruction {
        let op_code = data[address];

        match op_code {
            0x00 => Instruction::NOP,
            0x01 => Instruction::LD_BC_d16(d16::at(data, address + 1)),
            0x02 => Instruction::LD_pBC_A,
            0x03 => Instruction::INC_BC,
            0x04 => Instruction::INC_B,
            0x05 => Instruction::DEC_B,
            0x06 => Instruction::LD_B_d8(d8::at(data, address + 1)),
            0x07 => Instruction::RLCA,
            0x08 => Instruction::LD_pa16_SP(a16::at(data, address + 1)),
            0x09 => Instruction::ADD_HL_BC,
            0x0A => Instruction::LD_A_pBC,
            0x0B => Instruction::DEC_BC,
            0x0C => Instruction::INC_C,
            0x0D => Instruction::DEC_C,
            0x0E => Instruction::LD_C_d8(d8::at(data, address + 1)),
            0x0F => Instruction::RRCA,

            0x10 => Instruction::STOP_0,
            0x11 => Instruction::LD_DE_d16(d16::at(data, address + 1)),
            0x12 => Instruction::LD_pDE_A,
            0x13 => Instruction::INC_DE,
            0x14 => Instruction::INC_D,
            0x15 => Instruction::DEC_D,
            0x16 => Instruction::LD_D_d8(d8::at(data, address + 1)),
            0x17 => Instruction::RLA,
            0x18 => Instruction::JR_r8(r8::at(data, address + 1)),
            0x19 => Instruction::ADD_HL_DE,
            0x1A => Instruction::LD_A_pDE,
            0x1B => Instruction::DEC_DE,
            0x1C => Instruction::INC_E,
            0x1D => Instruction::DEC_E,
            0x1E => Instruction::LD_E_d8(d8::at(data, address + 1)),
            0x1F => Instruction::RRA,

            0x20 => Instruction::JR_NZ_r8(r8::at(data, address + 1)),
            0x21 => Instruction::LD_HL_d16(d16::at(data, address + 1)),
            0x22 => Instruction::LD_pHLp_A,
            0x23 => Instruction::INC_HL,
            0x24 => Instruction::INC_H,
            0x25 => Instruction::DEC_H,
            0x26 => Instruction::LD_H_d8(d8::at(data, address + 1)),
            0x27 => Instruction::DAA,
            0x28 => Instruction::JR_Z_r8(r8::at(data, address + 1)),
            0x29 => Instruction::ADD_HL_HL,
            0x2A => Instruction::LD_A_pHLp,
            0x2B => Instruction::DEC_HL,
            0x2C => Instruction::INC_L,
            0x2D => Instruction::DEC_L,
            0x2E => Instruction::LD_L_d8(d8::at(data, address + 1)),
            0x2F => Instruction::CPL,

            0x30 => Instruction::JR_NC_r8(r8::at(data, address + 1)),
            0x31 => Instruction::LD_SP_d16(d16::at(data, address + 1)),
            0x32 => Instruction::LD_pHLm_A,
            0x33 => Instruction::INC_SP,
            0x34 => Instruction::INC_pHL,
            0x35 => Instruction::DEC_pHL,
            0x36 => Instruction::LD_pHL_d8(d8::at(data, address + 1)),
            0x37 => Instruction::SCF,
            0x38 => Instruction::JR_C_r8(r8::at(data, address + 1)),
            0x39 => Instruction::ADD_HL_SP,
            0x3A => Instruction::LD_A_pHLm,
            0x3B => Instruction::DEC_SP,
            0x3C => Instruction::INC_A,
            0x3D => Instruction::DEC_A,
            0x3E => Instruction::LD_A_d8(d8::at(data, address + 1)),
            0x3F => Instruction::CCF,

            0x40 => Instruction::LD_B_B,
            0x41 => Instruction::LD_B_C,
            0x42 => Instruction::LD_B_D,
            0x43 => Instruction::LD_B_E,
            0x44 => Instruction::LD_B_H,
            0x45 => Instruction::LD_B_L,
            0x46 => Instruction::LD_B_pHL,
            0x47 => Instruction::LD_B_A,
            0x48 => Instruction::LD_C_B,
            0x49 => Instruction::LD_C_C,
            0x4A => Instruction::LD_C_D,
            0x4B => Instruction::LD_C_E,
            0x4C => Instruction::LD_C_H,
            0x4D => Instruction::LD_C_L,
            0x4E => Instruction::LD_C_pHL,
            0x4F => Instruction::LD_C_A,

            0x50 => Instruction::LD_D_B,
            0x51 => Instruction::LD_D_C,
            0x52 => Instruction::LD_D_D,
            0x53 => Instruction::LD_D_E,
            0x54 => Instruction::LD_D_H,
            0x55 => Instruction::LD_D_L,
            0x56 => Instruction::LD_D_pHL,
            0x57 => Instruction::LD_D_A,
            0x58 => Instruction::LD_E_B,
            0x59 => Instruction::LD_E_C,
            0x5A => Instruction::LD_E_D,
            0x5B => Instruction::LD_E_E,
            0x5C => Instruction::LD_E_H,
            0x5D => Instruction::LD_E_L,
            0x5E => Instruction::LD_E_pHL,
            0x5F => Instruction::LD_E_A,

            0x60 => Instruction::LD_H_B,
            0x61 => Instruction::LD_H_C,
            0x62 => Instruction::LD_H_D,
            0x63 => Instruction::LD_H_E,
            0x64 => Instruction::LD_H_H,
            0x65 => Instruction::LD_H_L,
            0x66 => Instruction::LD_H_pHL,
            0x67 => Instruction::LD_H_A,
            0x68 => Instruction::LD_L_B,
            0x69 => Instruction::LD_L_C,
            0x6A => Instruction::LD_L_D,
            0x6B => Instruction::LD_L_E,
            0x6C => Instruction::LD_L_H,
            0x6D => Instruction::LD_L_L,
            0x6E => Instruction::LD_L_pHL,
            0x6F => Instruction::LD_L_A,

            0x70 => Instruction::LD_pHL_B,
            0x71 => Instruction::LD_pHL_C,
            0x72 => Instruction::LD_pHL_D,
            0x73 => Instruction::LD_pHL_E,
            0x74 => Instruction::LD_pHL_H,
            0x75 => Instruction::LD_pHL_L,
            0x76 => Instruction::HALT,
            0x77 => Instruction::LD_pHL_A,
            0x78 => Instruction::LD_A_B,
            0x79 => Instruction::LD_A_C,
            0x7A => Instruction::LD_A_D,
            0x7B => Instruction::LD_A_E,
            0x7C => Instruction::LD_A_H,
            0x7D => Instruction::LD_A_L,
            0x7E => Instruction::LD_A_pHL,
            0x7F => Instruction::LD_A_A,

            0x80 => Instruction::ADD_A_B,
            0x81 => Instruction::ADD_A_C,
            0x82 => Instruction::ADD_A_D,
            0x83 => Instruction::ADD_A_E,
            0x84 => Instruction::ADD_A_H,
            0x85 => Instruction::ADD_A_L,
            0x86 => Instruction::ADD_A_pHL,
            0x87 => Instruction::ADD_A_A,
            0x88 => Instruction::ADC_A_B,
            0x89 => Instruction::ADC_A_C,
            0x8A => Instruction::ADC_A_D,
            0x8B => Instruction::ADC_A_E,
            0x8C => Instruction::ADC_A_H,
            0x8D => Instruction::ADC_A_L,
            0x8E => Instruction::ADC_A_pHL,
            0x8F => Instruction::ADC_A_A,

            0x90 => Instruction::SUB_B,
            0x91 => Instruction::SUB_C,
            0x92 => Instruction::SUB_D,
            0x93 => Instruction::SUB_E,
            0x94 => Instruction::SUB_H,
            0x95 => Instruction::SUB_L,
            0x96 => Instruction::SUB_pHL,
            0x97 => Instruction::SUB_A,
            0x98 => Instruction::SBC_A_B,
            0x99 => Instruction::SBC_A_C,
            0x9A => Instruction::SBC_A_D,
            0x9B => Instruction::SBC_A_E,
            0x9C => Instruction::SBC_A_H,
            0x9D => Instruction::SBC_A_L,
            0x9E => Instruction::SBC_A_pHL,
            0x9F => Instruction::SBC_A_A,

            0xA0 => Instruction::AND_B,
            0xA1 => Instruction::AND_C,
            0xA2 => Instruction::AND_D,
            0xA3 => Instruction::AND_E,
            0xA4 => Instruction::AND_H,
            0xA5 => Instruction::AND_L,
            0xA6 => Instruction::AND_pHL,
            0xA7 => Instruction::AND_A,
            0xA8 => Instruction::XOR_B,
            0xA9 => Instruction::XOR_C,
            0xAA => Instruction::XOR_D,
            0xAB => Instruction::XOR_E,
            0xAC => Instruction::XOR_H,
            0xAD => Instruction::XOR_L,
            0xAE => Instruction::XOR_pHL,
            0xAF => Instruction::XOR_A,

            0xB0 => Instruction::OR_B,
            0xB1 => Instruction::OR_C,
            0xB2 => Instruction::OR_D,
            0xB3 => Instruction::OR_E,
            0xB4 => Instruction::OR_H,
            0xB5 => Instruction::OR_L,
            0xB6 => Instruction::OR_pHL,
            0xB7 => Instruction::OR_A,
            0xB8 => Instruction::CP_B,
            0xB9 => Instruction::CP_C,
            0xBA => Instruction::CP_D,
            0xBB => Instruction::CP_E,
            0xBC => Instruction::CP_H,
            0xBD => Instruction::CP_L,
            0xBE => Instruction::CP_pHL,
            0xBF => Instruction::CP_A,

            0xC0 => Instruction::RET_NZ,
            0xC1 => Instruction::POP_BC,
            0xC2 => Instruction::JP_NZ_a16(a16::at(data, address + 1)),
            0xC3 => Instruction::JP_a16(a16::at(data, address + 1)),
            0xC4 => Instruction::CALL_NZ_a16(a16::at(data, address + 1)),
            0xC5 => Instruction::PUSH_BC,
            0xC6 => Instruction::ADD_A_d8(d8::at(data, address + 1)),
            0xC7 => Instruction::RST_00H,
            0xC8 => Instruction::RET_Z,
            0xC9 => Instruction::RET,
            0xCA => Instruction::JP_Z_a16(a16::at(data, address + 1)),
            0xCB => Instruction::PREFIX_CB,
            0xCC => Instruction::CALL_Z_a16(a16::at(data, address + 1)),
            0xCD => Instruction::CALL_a16(a16::at(data, address + 1)),
            0xCE => Instruction::ADC_A_d8(d8::at(data, address + 1)),
            0xCF => Instruction::RST_08H,

            0xD0 => Instruction::RET_NC,
            0xD1 => Instruction::POP_DE,
            0xD2 => Instruction::JP_NC_a16(a16::at(data, address + 1)),
            0xD3 => Instruction::Unknown,
            0xD4 => Instruction::CALL_NC_a16(a16::at(data, address + 1)),
            0xD5 => Instruction::PUSH_DE,
            0xD6 => Instruction::SUB_d8(d8::at(data, address + 1)),
            0xD7 => Instruction::RST_10H,
            0xD8 => Instruction::RET_C,
            0xD9 => Instruction::RETI,
            0xDA => Instruction::JP_C_a16(a16::at(data, address + 1)),
            0xDB => Instruction::Unknown,
            0xDC => Instruction::CALL_C_a16(a16::at(data, address + 1)),
            0xDD => Instruction::Unknown,
            0xDE => Instruction::SBC_A_d8(d8::at(data, address + 1)),
            0xDF => Instruction::RST_18H,

            0xE0 => Instruction::LDH_pa8_A(a8::at(data, address + 1)),
            0xE1 => Instruction::POP_HL,
            0xE2 => Instruction::LD_pC_A,
            0xE3 => Instruction::Unknown,
            0xE4 => Instruction::Unknown,
            0xE5 => Instruction::PUSH_HL,
            0xE6 => Instruction::AND_d8(d8::at(data, address + 1)),
            0xE7 => Instruction::RST_20H,
            0xE8 => Instruction::ADD_SP_r8(r8::at(data, address + 1)),
            0xE9 => Instruction::JP_pHL,
            0xEA => Instruction::LD_pa16_A(a16::at(data, address + 1)),
            0xEB => Instruction::Unknown,
            0xEC => Instruction::Unknown,
            0xED => Instruction::Unknown,
            0xEE => Instruction::XOR_d8(d8::at(data, address + 1)),
            0xEF => Instruction::RST_28H,

            0xF0 => Instruction::LDH_A_pa8(a8::at(data, address + 1)),
            0xF1 => Instruction::POP_AF,
            0xF2 => Instruction::LD_A_pC,
            0xF3 => Instruction::DI,
            0xF4 => Instruction::Unknown,
            0xF5 => Instruction::PUSH_AF,
            0xF6 => Instruction::OR_d8(d8::at(data, address + 1)),
            0xF7 => Instruction::RST_30H,
            0xF8 => Instruction::LD_HL_SPp_r8(r8::at(data, address + 1)),
            0xF9 => Instruction::LD_SP_HL,
            0xFA => Instruction::LD_A_pa16(a16::at(data, address + 1)),
            0xFB => Instruction::EI,
            0xFC => Instruction::Unknown,
            0xFD => Instruction::Unknown,
            0xFE => Instruction::CP_d8(d8::at(data, address + 1)),
            0xFF => Instruction::RST_38H,

            _ => Instruction::Unknown
        }
    }
}
